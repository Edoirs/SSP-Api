// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SelfPortalAPi;

#nullable disable

namespace SelfPortalAPi.Migrations.ApiDb
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SelfPortalAPi.Model.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AddressTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AddressTypeId");

                    b.ToTable("Address_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AgencyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AgencyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AgencyId");

                    b.HasIndex("AgencyTypeId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AgencyType", b =>
                {
                    b.Property<int>("AgencyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AgencyTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AgencyTypeId");

                    b.ToTable("Agency_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AlScreen", b =>
                {
                    b.Property<int>("Aslid")
                        .HasColumnType("int")
                        .HasColumnName("ASLID");

                    b.Property<string>("Aslname")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ASLName");

                    b.HasKey("Aslid");

                    b.ToTable("AL_Screen", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Assessment", b =>
                {
                    b.Property<long>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AssessmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssessmentId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("AssessmentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("AssessmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AssessmentNotes")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("AssessmentRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BillPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SettlementDueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SettlementStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementStatusID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("AssessmentId");

                    b.HasIndex(new[] { "TaxPayerTypeId" }, "IDX_ASS_TPTID");

                    b.HasIndex(new[] { "Active", "AssessmentDate" }, "IDX_AST_IA_IAD");

                    b.HasIndex(new[] { "SettlementDueDate", "SettlementStatusId" }, "IDX_AST_SDD_SSID");

                    b.HasIndex(new[] { "SettlementStatusId" }, "IDX_AST_SSID");

                    b.HasIndex(new[] { "SettlementStatusId", "AssessmentDate" }, "IDX_AST_SSID_AD");

                    b.HasIndex(new[] { "TaxPayerTypeId", "SettlementDueDate", "SettlementStatusId" }, "IDX_AST_TPTID_SDD_SSID");

                    b.HasIndex(new[] { "TaxPayerTypeId", "TaxPayerId" }, "IDX_AST_TPTID_TID");

                    b.ToTable("Assessment", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateAssessmentCode");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentGroup", b =>
                {
                    b.Property<int>("AssessmentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssessmentGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentGroupId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AssessmentGroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AssessmentGroupId");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("Assessment_Group", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentItem", b =>
                {
                    b.Property<int>("AssessmentItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentItemId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<int?>("AssessmentGroupId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentGroupID");

                    b.Property<int?>("AssessmentItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemCategoryID");

                    b.Property<string>("AssessmentItemName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AssessmentItemReferenceNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AssessmentItemSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemSubCategoryID");

                    b.Property<int?>("AssessmentSubGroupId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentSubGroupID");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("ComputationId")
                        .HasColumnType("int")
                        .HasColumnName("ComputationID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<int?>("RevenueSubStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueSubStreamID");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TaxBaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("AssessmentItemId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AssessmentGroupId");

                    b.HasIndex("AssessmentItemCategoryId");

                    b.HasIndex("AssessmentItemSubCategoryId");

                    b.HasIndex("AssessmentSubGroupId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("ComputationId");

                    b.HasIndex("RevenueStreamId");

                    b.HasIndex("RevenueSubStreamId");

                    b.ToTable("Assessment_Items", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateAssessmentItemRefNo");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentItemCategory", b =>
                {
                    b.Property<int>("AssessmentItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentItemCategoryId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AssessmentItemCategoryName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AssessmentItemCategoryId");

                    b.ToTable("Assessment_Item_Category", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentItemSubCategory", b =>
                {
                    b.Property<int>("AssessmentItemSubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemSubCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentItemSubCategoryId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssessmentItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemCategoryID");

                    b.Property<string>("AssessmentItemSubCategoryName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AssessmentItemSubCategoryId");

                    b.HasIndex("AssessmentItemCategoryId");

                    b.ToTable("Assessment_Item_SubCategory", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentRule", b =>
                {
                    b.Property<int>("AssessmentRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssessmentRuleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentRuleId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("AssessmentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AssessmentRuleCode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AssessmentRuleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentFrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentFrequencyID");

                    b.Property<int?>("PaymentOptionId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentOptionID");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("RuleRunId")
                        .HasColumnType("int")
                        .HasColumnName("RuleRunID");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("AssessmentRuleId");

                    b.HasIndex("PaymentFrequencyId");

                    b.HasIndex("PaymentOptionId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RuleRunId");

                    b.ToTable("Assessment_Rules", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateAssessmentRuleCode");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentSubGroup", b =>
                {
                    b.Property<int>("AssessmentSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssessmentSubGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentSubGroupId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssessmentGroupId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentGroupID");

                    b.Property<string>("AssessmentSubGroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AssessmentSubGroupId");

                    b.HasIndex("AssessmentGroupId");

                    b.ToTable("Assessment_SubGroup", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssetType", b =>
                {
                    b.Property<int>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AssetTypeName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AssetTypeId");

                    b.ToTable("Asset_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AuditLog", b =>
                {
                    b.Property<long>("Alid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ALID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Alid"));

                    b.Property<int?>("Aslid")
                        .HasColumnType("int")
                        .HasColumnName("ASLID");

                    b.Property<string>("Comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.HasKey("Alid");

                    b.HasIndex("Aslid");

                    b.ToTable("Audit_Log", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("BuildingCompletionId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingCompletionID");

                    b.Property<string>("BuildingName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("BuildingOwnershipId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingOwnershipID");

                    b.Property<int?>("BuildingPurposeId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingPurposeID");

                    b.Property<string>("BuildingRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("BuildingRIN");

                    b.Property<decimal?>("BuildingSizeLength")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("BuildingSize_Length");

                    b.Property<decimal?>("BuildingSizeWidth")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("BuildingSize_Width");

                    b.Property<string>("BuildingTagNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("BuildingTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<string>("Latitude")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("Lgaid")
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    b.Property<string>("Longitude")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NoOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("OffStreetName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StreetName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int")
                        .HasColumnName("TownID");

                    b.Property<int?>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("WardID");

                    b.HasKey("BuildingId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("BuildingCompletionId");

                    b.HasIndex("BuildingOwnershipId");

                    b.HasIndex("BuildingPurposeId");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("Lgaid");

                    b.HasIndex("TownId");

                    b.HasIndex("WardId");

                    b.ToTable("Building", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateBuildingRIN_BuildingTagNumber");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingCompletion", b =>
                {
                    b.Property<int>("BuildingCompletionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuildingCompletionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingCompletionId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BuildingCompletionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BuildingCompletionId");

                    b.ToTable("Building_Completion", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingOwnership", b =>
                {
                    b.Property<int>("BuildingOwnershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuildingOwnershipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingOwnershipId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BuildingOwnershipName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BuildingOwnershipId");

                    b.ToTable("Building_Ownership", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingPurpose", b =>
                {
                    b.Property<int>("BuildingPurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuildingPurposeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingPurposeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BuildingPurposeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BuildingPurposeId");

                    b.ToTable("Building_Purpose", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingType", b =>
                {
                    b.Property<int>("BuildingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuildingTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BuildingTypeName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BuildingTypeId");

                    b.ToTable("Building_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingUnit", b =>
                {
                    b.Property<int>("BuildingUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuildingUnitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingUnitId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BuildingUnitRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BuildingUnitRIN");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("SizeID");

                    b.Property<int?>("UnitFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("UnitFunctionID");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("UnitOccupancyId")
                        .HasColumnType("int")
                        .HasColumnName("UnitOccupancyID");

                    b.Property<int?>("UnitPurposeId")
                        .HasColumnType("int")
                        .HasColumnName("UnitPurposeID");

                    b.HasKey("BuildingUnitId");

                    b.HasIndex("SizeId");

                    b.HasIndex("UnitFunctionId");

                    b.HasIndex("UnitOccupancyId");

                    b.HasIndex("UnitPurposeId");

                    b.ToTable("Building_Unit", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<string>("BusinessAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("BusinessCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessCategoryID");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("BusinessNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("BusinessOperationId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessOperationID");

                    b.Property<string>("BusinessRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("BusinessRIN");

                    b.Property<int?>("BusinessSectorId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessSectorID");

                    b.Property<int?>("BusinessStructureId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessStructureID");

                    b.Property<int?>("BusinessSubSectorId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessSubSectorID");

                    b.Property<int?>("BusinessTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessTypeID");

                    b.Property<string>("ContactName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<int?>("Lgaid")
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("SizeID");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId");

                    b.HasIndex("BusinessCategoryId");

                    b.HasIndex("BusinessOperationId");

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("BusinessStructureId");

                    b.HasIndex("BusinessSubSectorId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("Lgaid");

                    b.HasIndex("SizeId");

                    b.HasIndex(new[] { "AssetTypeId" }, "IDX_BA");

                    b.ToTable("Business", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateBusinessRIN");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessCategory", b =>
                {
                    b.Property<int>("BusinessCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessCategoryId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessCategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BusinessTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BusinessCategoryId");

                    b.HasIndex("BusinessTypeId");

                    b.ToTable("Business_Category", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessOperation", b =>
                {
                    b.Property<int>("BusinessOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessOperationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessOperationId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessOperationName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BusinessTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BusinessOperationId");

                    b.HasIndex("BusinessTypeId");

                    b.ToTable("Business_Operation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessSector", b =>
                {
                    b.Property<int>("BusinessSectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessSectorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessSectorId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("BusinessCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessCategoryID");

                    b.Property<string>("BusinessSectorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BusinessTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BusinessSectorId");

                    b.HasIndex("BusinessCategoryId");

                    b.HasIndex("BusinessTypeId");

                    b.ToTable("Business_Sector", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessStructure", b =>
                {
                    b.Property<int>("BusinessStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessStructureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessStructureId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessStructureName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("BusinessTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BusinessStructureId");

                    b.HasIndex("BusinessTypeId");

                    b.ToTable("Business_Structure", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessSubSector", b =>
                {
                    b.Property<int>("BusinessSubSectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessSubSectorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessSubSectorId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("BusinessSectorId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessSectorID");

                    b.Property<string>("BusinessSubSectorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BusinessSubSectorId");

                    b.HasIndex("BusinessSectorId");

                    b.ToTable("Business_SubSector", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessType", b =>
                {
                    b.Property<int>("BusinessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BusinessTypeName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BusinessTypeId");

                    b.ToTable("Business_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Certificate", b =>
                {
                    b.Property<long>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CertificateId"));

                    b.Property<int?>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("AssetID");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<DateTime?>("CertificateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CertificatePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CertificateTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CertificateTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DisplayTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DisplayTypeID");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GeneratedPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OtherInformation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("PdftemplateId")
                        .HasColumnType("int")
                        .HasColumnName("PDFTemplateID");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("QrcodeId")
                        .HasColumnType("int")
                        .HasColumnName("QRCodeID");

                    b.Property<string>("QrimagePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("QRImagePath");

                    b.Property<string>("SealedPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("SedeDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("SEDE_DocumentID");

                    b.Property<long?>("SedeOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("SEDE_OrderID");

                    b.Property<string>("SignedDigitalPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SignedVisiblePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("SignerId")
                        .HasColumnType("int")
                        .HasColumnName("SignerID");

                    b.Property<int?>("SignerRoleId")
                        .HasColumnType("int")
                        .HasColumnName("SignerRoleID");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("ValidatedPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("VisibleSignStatusId")
                        .HasColumnType("int")
                        .HasColumnName("VisibleSignStatusID");

                    b.HasKey("CertificateId");

                    b.HasIndex("CertificateTypeId");

                    b.ToTable("Certificates", t =>
                        {
                            t.HasTrigger("TRG_GenerateCertificateNumber");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.CertificateType", b =>
                {
                    b.Property<int>("CertificateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CertificateTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<int?>("Approver1")
                        .HasColumnType("int");

                    b.Property<int?>("Approver2")
                        .HasColumnType("int");

                    b.Property<string>("CertificateTemplatePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CertificateTypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Cnprefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CNPrefix");

                    b.Property<int?>("CnserialNumber")
                        .HasColumnType("int")
                        .HasColumnName("CNSerialNumber");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProcessingTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessingTypeID");

                    b.Property<int?>("SedePdftemplateId")
                        .HasColumnType("int")
                        .HasColumnName("SEDE_PDFTemplateID");

                    b.Property<int?>("SignMode")
                        .HasColumnType("int");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("CertificateTypeId");

                    b.ToTable("Certificate_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Cac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CAC");

                    b.Property<string>("CacregistrationNumber")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("CACRegistrationNumber");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CompanyRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CompanyRIN");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<int?>("EconomicActivitiesId")
                        .HasColumnType("int")
                        .HasColumnName("EconomicActivitiesID");

                    b.Property<string>("EmailAddress1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EmailAddress2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MobileNumber1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MobileNumber2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NotificationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationMethodID");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("RegisterationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RegisterationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RegisterationStatusID");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("Tin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TIN");

                    b.Property<int?>("VerificationOtp")
                        .HasColumnType("int")
                        .HasColumnName("VerificationOTP");

                    b.HasKey("CompanyId");

                    b.HasIndex("EconomicActivitiesId");

                    b.HasIndex("NotificationMethodId");

                    b.HasIndex("RegisterationStatusId");

                    b.HasIndex("TaxPayerTypeId");

                    b.HasIndex(new[] { "TaxOfficeId" }, "IDX_COMP_TOID");

                    b.ToTable("Company", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateCompanyRIN");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.DealerType", b =>
                {
                    b.Property<int>("DealerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DealerTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DealerTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DealerTypeId");

                    b.ToTable("Dealer_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.DiEdoGisMdaServiceItems2021", b =>
                {
                    b.Property<int?>("ComputationId")
                        .HasColumnType("int")
                        .HasColumnName("ComputationID");

                    b.Property<string>("ComputationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<string>("ItemCategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ItemSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemSubCategoryID");

                    b.Property<string>("ItemSubCategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MdaserviceItemId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceItemID");

                    b.Property<string>("MdaserviceItemName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceItemName");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<double?>("Ref")
                        .HasColumnType("float");

                    b.Property<int?>("RevenueAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueAgencyID");

                    b.Property<string>("RevenueAgencyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<string>("RevenueStreamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RevenueSubStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueSubStreamID");

                    b.Property<string>("RevenueSubStreamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TaxBaseAmount")
                        .HasColumnType("float");

                    b.ToTable("DI_EdoGIS_MDA_Service_Items_2021", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.DiEdoGisMdaServiceItems22021", b =>
                {
                    b.Property<int?>("ComputationId")
                        .HasColumnType("int")
                        .HasColumnName("ComputationID");

                    b.Property<string>("ComputationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<string>("ItemCategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ItemSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemSubCategoryID");

                    b.Property<string>("ItemSubCategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MdaserviceItemId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceItemID");

                    b.Property<string>("MdaserviceItemName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceItemName");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<double?>("Ref")
                        .HasColumnType("float");

                    b.Property<int?>("RevenueAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueAgencyID");

                    b.Property<string>("RevenueAgencyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<string>("RevenueStreamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RevenueSubStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueSubStreamID");

                    b.Property<string>("RevenueSubStreamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TaxBaseAmount")
                        .HasColumnType("float");

                    b.ToTable("DI_EdoGIS_MDA_Service_Items_2_2021", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.DiEdoGisMdaServices2021", b =>
                {
                    b.Property<int?>("FrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("FrequencyID");

                    b.Property<string>("FrequencyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MdaserviceId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceID");

                    b.Property<string>("MdaserviceItemIds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceItemIds");

                    b.Property<string>("MdaserviceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceName");

                    b.Property<int?>("PaymentOptionId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentOptionID");

                    b.Property<string>("PaymentOptionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Ref")
                        .HasColumnType("float");

                    b.Property<int?>("RunRuleId")
                        .HasColumnType("int")
                        .HasColumnName("RunRuleID");

                    b.Property<string>("RunRuleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SerivceAmount")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("ServiceItemRef")
                        .HasColumnType("float");

                    b.Property<string>("SettlementMethodIds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettlementMethodNames")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("TaxYear")
                        .HasColumnType("float");

                    b.ToTable("DI_EdoGIS_MDA_Services_2021", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.DiEdoGisMdaServices22021", b =>
                {
                    b.Property<int?>("FrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("FrequencyID");

                    b.Property<string>("FrequencyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MdaserviceId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceID");

                    b.Property<string>("MdaserviceItemIds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceItemIds");

                    b.Property<string>("MdaserviceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceName");

                    b.Property<int?>("PaymentOptionId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentOptionID");

                    b.Property<string>("PaymentOptionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Ref")
                        .HasColumnType("float");

                    b.Property<int?>("RunRuleId")
                        .HasColumnType("int")
                        .HasColumnName("RunRuleID");

                    b.Property<string>("RunRuleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SerivceAmount")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("ServiceItemRef")
                        .HasColumnType("float");

                    b.Property<string>("SettlementMethodIds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettlementMethodNames")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("TaxYear")
                        .HasColumnType("float");

                    b.ToTable("DI_EdoGIS_MDA_Services_2_2021", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.DiMdaService2021", b =>
                {
                    b.Property<int?>("FrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("FrequencyID");

                    b.Property<string>("FrequencyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MdaserviceId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceID");

                    b.Property<string>("MdaserviceItemIds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceItemIds");

                    b.Property<string>("MdaserviceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceName");

                    b.Property<int?>("PaymentOptionId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentOptionID");

                    b.Property<string>("PaymentOptionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Ref")
                        .HasColumnType("float");

                    b.Property<int?>("RunRuleId")
                        .HasColumnType("int")
                        .HasColumnName("RunRuleID");

                    b.Property<string>("RunRuleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SerivceAmount")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ServiceItemRef")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettlementMethodIds")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettlementMethodNames")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("TaxYear")
                        .HasColumnType("float");

                    b.ToTable("DI_MDA_Service_2021", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.DiMdaServiceItems2021", b =>
                {
                    b.Property<int?>("ComputationId")
                        .HasColumnType("int")
                        .HasColumnName("ComputationID");

                    b.Property<string>("ComputationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<string>("ItemCategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ItemSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemSubCategoryID");

                    b.Property<string>("ItemSubCategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MdaserviceItemId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceItemID");

                    b.Property<string>("MdaserviceItemName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MDAServiceItemName");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<double?>("Ref")
                        .HasColumnType("float");

                    b.Property<int?>("RevenueAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueAgencyID");

                    b.Property<string>("RevenueAgencyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<string>("RevenueStreamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RevenueSubStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueSubStreamID");

                    b.Property<string>("RevenueSubStreamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TaxBaseAmount")
                        .HasColumnType("float");

                    b.ToTable("DI_MDA_Service_Items_2021", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Directorate", b =>
                {
                    b.Property<int>("DirectorateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DirectorateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorateId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DirectorateName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DirectorateId");

                    b.ToTable("Directorates");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EconomicActivity", b =>
                {
                    b.Property<int>("EconomicActivitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EconomicActivitiesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EconomicActivitiesId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EconomicActivitiesName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("EconomicActivitiesId");

                    b.HasIndex("TaxPayerTypeId");

                    b.ToTable("Economic_Activities", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EedIndividual", b =>
                {
                    b.Property<long>("Eedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EEDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Eedid"));

                    b.Property<string>("Bvn")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("BVN");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("ContactAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<string>("EmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("house_number");

                    b.Property<string>("LastName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Lganame")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LGAName");

                    b.Property<string>("MaritalStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MiddleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Nationality")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NIN");

                    b.Property<string>("Notification")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Occupation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_1");

                    b.Property<string>("PhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_2");

                    b.Property<string>("StateName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StateOfOrigin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StreetName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("street_name");

                    b.Property<string>("TaxOffice")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Tin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN");

                    b.Property<string>("Title")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Eedid");

                    b.ToTable("EED_Individual", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Ega", b =>
                {
                    b.Property<int>("Egaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EGAID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Egaid"));

                    b.Property<int?>("AssessmentItemId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemID");

                    b.Property<int?>("AssessmentRuleId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentRuleID");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("AssetID");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<string>("BillRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ErrorMessage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("Result")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TaxBaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("Egaid");

                    b.ToTable("EGA", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ElmahError", b =>
                {
                    b.Property<Guid>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AllXml")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ErrorId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ErrorId"), false);

                    b.HasIndex(new[] { "Application", "TimeUtc", "Sequence" }, "IX_ELMAH_Error_App_Time_Seq")
                        .IsDescending(false, true, true);

                    b.ToTable("ELMAH_Error", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmBank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BankDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BankName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("BankId");

                    b.ToTable("EM_Bank", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmBankStatement", b =>
                {
                    b.Property<long>("Bsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Bsid"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Category")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RevenueHead")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Bsid");

                    b.ToTable("EM_BankStatement", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CategoryId");

                    b.ToTable("EM_Category", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmDataSource", b =>
                {
                    b.Property<int>("DataSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataSourceId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DataSourceName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DataSourceId");

                    b.ToTable("EM_DataSource", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmIgrclassification", b =>
                {
                    b.Property<long>("IgrclassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IGRClassificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IgrclassificationId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RevenueHeadId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueHeadID");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.HasKey("IgrclassificationId");

                    b.ToTable("EM_IGRClassification", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmImportLog", b =>
                {
                    b.Property<long>("ImportLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ImportLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ImportLogId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImportFilePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TotalRecord")
                        .HasColumnType("int");

                    b.HasKey("ImportLogId");

                    b.ToTable("EM_ImportLog", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmMapIgrclassificationEntry", b =>
                {
                    b.Property<long>("Cdseid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CDSEID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Cdseid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<long?>("Dseid")
                        .HasColumnType("bigint")
                        .HasColumnName("DSEID");

                    b.Property<long?>("IgrclassificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("IGRClassificationID");

                    b.HasKey("Cdseid");

                    b.ToTable("EM_MAP_IGRClassification_Entry", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmPdMainAuthorized", b =>
                {
                    b.Property<long>("Pdmaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDMAID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Pdmaid"));

                    b.Property<string>("AdditionalInfo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AssessmentReference")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AuthId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("AuthID");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("BankBranch")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ChequeValueDate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DepositSlip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReceiptNo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RetrievalRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RevenueItem")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Rin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RIN");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Pdmaid");

                    b.ToTable("EM_PD_Main_Authorized", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmPdMainPending", b =>
                {
                    b.Property<long>("Pdmpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDMPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Pdmpid"));

                    b.Property<string>("AdditionalInfo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AssessmentReference")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AuthId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("AuthID");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("BankBranch")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ChequeValueDate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DepositSlip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReceiptNo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RetrievalRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RevenueItem")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Rin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RIN");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Pdmpid");

                    b.ToTable("EM_PD_Main_Pending", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmPdMvaAuthorized", b =>
                {
                    b.Property<long>("Pdmvaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDMVAID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Pdmvaid"));

                    b.Property<string>("AdditionalInfo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AssessmentReference")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AuthId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("AuthID");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("BankBranch")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ChequeValueDate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DepositSlip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReceiptNo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RetrievalRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RevenueItem")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Rin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RIN");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Pdmvaid");

                    b.ToTable("EM_PD_MVA_Authorized", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmPdMvaPending", b =>
                {
                    b.Property<long>("Pdmvpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDMVPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Pdmvpid"));

                    b.Property<string>("AdditionalInfo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AssessmentReference")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AuthId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("AuthID");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("BankBranch")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ChequeValueDate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DepositSlip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReceiptNo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RetrievalRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RevenueItem")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Rin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RIN");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Pdmvpid");

                    b.ToTable("EM_PD_MVA_Pending", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmRevenueHead", b =>
                {
                    b.Property<int>("RevenueHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RevenueHeadID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RevenueHeadId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RevenueHeadName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RevenueHeadId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EM_RevenueHead", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EpldBusiness", b =>
                {
                    b.Property<long>("Epldid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EPLDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Epldid"));

                    b.Property<string>("BusinessAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("BusinessCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessCategoryID");

                    b.Property<string>("BusinessCategoryName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("BusinessNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("BusinessOperationId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessOperationID");

                    b.Property<string>("BusinessOperationName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("BusinessSectorId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessSectorID");

                    b.Property<string>("BusinessSectorName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("BusinessStructureId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessStructureID");

                    b.Property<string>("BusinessStructureName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("BusinessSubSectorId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessSubSectorID");

                    b.Property<string>("BusinessSubSectorName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("BusinessTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessTypeID");

                    b.Property<string>("BusinessTypename")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CompCacRegistrationnumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_cac_registrationnumber");

                    b.Property<int?>("CompEconomicActivityId")
                        .HasColumnType("int")
                        .HasColumnName("comp_economic_activity_id");

                    b.Property<string>("CompEconomicActivityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_economic_activity_name");

                    b.Property<string>("CompEmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_email_address");

                    b.Property<string>("CompName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_name");

                    b.Property<string>("CompNotificationName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_notificationName");

                    b.Property<int?>("CompNotificationid")
                        .HasColumnType("int")
                        .HasColumnName("comp_notificationid");

                    b.Property<string>("CompPhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_phone_no_1");

                    b.Property<string>("CompPhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_phone_no_2");

                    b.Property<string>("CompTaxofficeName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_taxofficeName");

                    b.Property<int?>("CompTaxofficeid")
                        .HasColumnType("int")
                        .HasColumnName("comp_taxofficeid");

                    b.Property<string>("CompTin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_tin");

                    b.Property<string>("ContactName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<DateTime?>("IndDateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("ind_date_of_birth");

                    b.Property<int?>("IndEconomicActivityId")
                        .HasColumnType("int")
                        .HasColumnName("ind_economic_activity_id");

                    b.Property<string>("IndEconomicActivityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_economic_activity_name");

                    b.Property<string>("IndEmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_email_address");

                    b.Property<string>("IndFirstName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_first_name");

                    b.Property<int?>("IndGenderId")
                        .HasColumnType("int")
                        .HasColumnName("ind_GenderID");

                    b.Property<string>("IndGenderName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_GenderName");

                    b.Property<string>("IndLastName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_last_name");

                    b.Property<string>("IndMaritalstatusName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_maritalstatusName");

                    b.Property<int?>("IndMaritalstatusid")
                        .HasColumnType("int")
                        .HasColumnName("ind_maritalstatusid");

                    b.Property<string>("IndMiddleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_middle_name");

                    b.Property<string>("IndNationalityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_nationalityName");

                    b.Property<int?>("IndNationalityid")
                        .HasColumnType("int")
                        .HasColumnName("ind_nationalityid");

                    b.Property<string>("IndNotificationName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_notificationName");

                    b.Property<int?>("IndNotificationid")
                        .HasColumnType("int")
                        .HasColumnName("ind_notificationid");

                    b.Property<string>("IndPhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_phone_no_1");

                    b.Property<string>("IndPhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_phone_no_2");

                    b.Property<string>("IndTaxofficeName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_taxofficeName");

                    b.Property<int?>("IndTaxofficeid")
                        .HasColumnType("int")
                        .HasColumnName("ind_taxofficeid");

                    b.Property<string>("IndTin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_tin");

                    b.Property<int?>("IndTitleId")
                        .HasColumnType("int")
                        .HasColumnName("ind_TitleID");

                    b.Property<string>("IndTitleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_TitleName");

                    b.Property<int?>("Lgaid")
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    b.Property<string>("Lganame")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LGAName");

                    b.Property<string>("RecordResult")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("RecordStatus")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RegisteredName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Rin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RIN");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("SizeID");

                    b.Property<string>("SizeName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxPayerRoleId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerRoleID");

                    b.Property<string>("TaxPayerRoleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("TaxPayerTypeName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Epldid");

                    b.ToTable("EPLD_Business", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EpldIndividual", b =>
                {
                    b.Property<long>("Epldid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EPLDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Epldid"));

                    b.Property<string>("Bvn")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("BVN");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("ContactAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<int?>("EconomicActivityId")
                        .HasColumnType("int")
                        .HasColumnName("EconomicActivityID");

                    b.Property<string>("EconomicActivityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("first_name");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<string>("GenderName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("house_number");

                    b.Property<string>("LastName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Lganame")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LGAName");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MaritalStatusID");

                    b.Property<string>("MaritalStatusName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MiddleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("middle_name");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int")
                        .HasColumnName("NationalityID");

                    b.Property<string>("NationalityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NIN");

                    b.Property<int?>("NotificationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationMethodID");

                    b.Property<string>("NotificationMethodName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_1");

                    b.Property<string>("PhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_2");

                    b.Property<string>("RecordResult")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("RecordStatus")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Rin")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("RIN");

                    b.Property<string>("StateName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StateOfOrigin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StreetName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("street_name");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<string>("TaxOfficeName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Tin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleID");

                    b.Property<string>("TitleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Epldid");

                    b.ToTable("EPLD_Individual", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EsdBusiness", b =>
                {
                    b.Property<long>("Esdid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ESDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Esdid"));

                    b.Property<string>("BusinessCategory")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("business_category");

                    b.Property<string>("BusinessOperation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("business_operation");

                    b.Property<string>("BusinessSector")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("business_sector");

                    b.Property<string>("BusinessStructure")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("business_structure");

                    b.Property<string>("BusinessSubSector")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("business_sub_sector");

                    b.Property<string>("BusinessType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("business_type");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("city");

                    b.Property<DateTime?>("CommencementDate")
                        .HasColumnType("datetime")
                        .HasColumnName("commencement_date");

                    b.Property<string>("CompCacRegistrationnumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_cac_registrationnumber");

                    b.Property<string>("CompEconomicActivity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_economic_activity");

                    b.Property<string>("CompEmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_email_address");

                    b.Property<string>("CompName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_name");

                    b.Property<string>("CompNotification")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_notification");

                    b.Property<string>("CompPhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_phone_no_1");

                    b.Property<string>("CompPhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_phone_no_2");

                    b.Property<string>("CompTaxoffice")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_taxoffice");

                    b.Property<string>("CompTin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comp_tin");

                    b.Property<string>("ContactAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Contact_Name");

                    b.Property<string>("CountryName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<DateTime?>("DateOfIncorporation")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_incorporation");

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_registration");

                    b.Property<string>("DirectorEmail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("director_email");

                    b.Property<string>("DirectorName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("director_name");

                    b.Property<string>("DirectorPhone")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("director_phone");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<string>("EmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email_address");

                    b.Property<string>("FinYrBegin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FinYrEnd")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("house_number");

                    b.Property<DateTime?>("IndDateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("ind_date_of_birth");

                    b.Property<string>("IndEconomicActivity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_economic_activity");

                    b.Property<string>("IndEmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_email_address");

                    b.Property<string>("IndFirstName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_first_name");

                    b.Property<string>("IndGender")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_Gender");

                    b.Property<string>("IndLastName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_last_name");

                    b.Property<string>("IndMaritalstatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_maritalstatus");

                    b.Property<string>("IndMiddleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_middle_name");

                    b.Property<string>("IndNationality")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_nationality");

                    b.Property<string>("IndNotification")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_notification");

                    b.Property<string>("IndPhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_phone_no_1");

                    b.Property<string>("IndPhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_phone_no_2");

                    b.Property<string>("IndTaxoffice")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_taxoffice");

                    b.Property<string>("IndTin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_tin");

                    b.Property<string>("IndTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ind_Title");

                    b.Property<string>("Lganame")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LGAName");

                    b.Property<string>("LineOfBusinessCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("line_of_business_code");

                    b.Property<string>("LobName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("lob_name");

                    b.Property<string>("MainTradeName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("main_trade_name");

                    b.Property<string>("OrgName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("org_name");

                    b.Property<string>("PhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_1");

                    b.Property<string>("PhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_2");

                    b.Property<string>("PremisesSize")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Premises_Size");

                    b.Property<string>("RecordError")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("record_error");

                    b.Property<string>("RecordStatus")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("record_status");

                    b.Property<string>("RegisteredName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("registered_name");

                    b.Property<string>("RegistrationNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("registration_number");

                    b.Property<string>("StateName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StreetName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("street_name");

                    b.Property<string>("TaxAuthorityCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaxAuthorityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaxPayerRole")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaxpayerStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Tin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("tin");

                    b.HasKey("Esdid");

                    b.ToTable("ESD_Business", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EsdIndividual", b =>
                {
                    b.Property<long>("Esdid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ESDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Esdid"));

                    b.Property<string>("Bvn")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("BVN");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("ContactAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<string>("EmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("house_number");

                    b.Property<string>("LastName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Lganame")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LGAName");

                    b.Property<string>("MaritalStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MiddleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Nationality")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NIN");

                    b.Property<string>("Notification")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Occupation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_1");

                    b.Property<string>("PhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_2");

                    b.Property<string>("RecordError")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("record_error");

                    b.Property<string>("RecordStatus")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("record_status");

                    b.Property<string>("StateName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StateOfOrigin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StreetName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("street_name");

                    b.Property<string>("TaxOffice")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Tin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN");

                    b.Property<string>("Title")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Esdid");

                    b.ToTable("ESD_Individual", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ExceptionType", b =>
                {
                    b.Property<int>("ExceptionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExceptionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExceptionTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExceptionTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ExceptionTypeId");

                    b.ToTable("Exception_Type", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ExternalDataSource", b =>
                {
                    b.Property<int>("DataSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataSourceId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DataSourceName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DataSourceId");

                    b.ToTable("External_DataSource", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<string>("GenderName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GisfileAssessment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssessmentID");

                    b.Property<string>("AssessmentYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GISFileAssessment", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GisfileAssessmentItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AssessmentAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssessmentID");

                    b.Property<string>("AssetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GISFileAssessmentItem", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GisfileAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AnyOccupants")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetAge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetBillingZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetCofO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetCompletionYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetFootprintPresent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetFurnished")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetLatitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetLga")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AssetLGA");

                    b.Property<string>("AssetLongitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetOffStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetPerimeter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetPurpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetRoadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetSubType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetSubzone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetWard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("datetime2");

                    b.Property<string>("ElectricConnection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasBuildings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasFence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasGenerator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasSwimmingPool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoldingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelOfCompletion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfBldgs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfFloors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccupancyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccupierStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyID");

                    b.Property<string>("RoofMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SewageAccess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolidWasteCollectionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateOfRepair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportingDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WallMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterConnectionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GISFileAsset", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GisfileHolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSaved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GISFileHolder", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GisfileInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsReversal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("isReversal");

                    b.Property<string>("PageNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GISFileInvoice", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GisfileInvoiceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("PageNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevenueHeadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GISFileInvoiceItem", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GisfileParty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AcquisitionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSaved")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyDob")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyDOB");

                    b.Property<string>("PartyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyExtId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyExtID");

                    b.Property<string>("PartyFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyID");

                    b.Property<string>("PartyLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyMaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyNin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyNIN");

                    b.Property<string>("PartyOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyPhone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyTin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyTIN");

                    b.Property<string>("PartyTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GISFileParty", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Gistesting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("GISTesting", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Government", b =>
                {
                    b.Property<int>("GovernmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GovernmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GovernmentId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<string>("GovernmentName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("GovernmentRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("GovernmentRIN");

                    b.Property<int?>("GovernmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("GovernmentTypeID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NotificationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationMethodID");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("RegisterationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RegisterationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RegisterationStatusID");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("Tin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TIN");

                    b.Property<int?>("VerificationOtp")
                        .HasColumnType("int")
                        .HasColumnName("VerificationOTP");

                    b.HasKey("GovernmentId");

                    b.HasIndex("GovernmentTypeId");

                    b.HasIndex("NotificationMethodId");

                    b.HasIndex("RegisterationStatusId");

                    b.HasIndex("TaxOfficeId");

                    b.HasIndex("TaxPayerTypeId");

                    b.ToTable("Government", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateGovernmentRIN");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GovernmentType", b =>
                {
                    b.Property<int>("GovernmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GovernmentTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GovernmentTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GovernmentTypeName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("GovernmentTypeId");

                    b.ToTable("Government_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Individual", b =>
                {
                    b.Property<int>("IndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndividualID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndividualId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BiometricDetails")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<int?>("EconomicActivitiesId")
                        .HasColumnType("int")
                        .HasColumnName("EconomicActivitiesID");

                    b.Property<string>("EmailAddress1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EmailAddress2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<string>("IndividualRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IndividualRIN");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MaritalStatusID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MobileNumber1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MobileNumber2")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int")
                        .HasColumnName("NationalityID");

                    b.Property<string>("Nin")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NIN");

                    b.Property<int?>("NotificationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationMethodID");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("RegisterationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RegisterationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RegisterationStatusID");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("Tin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TIN");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleID");

                    b.Property<int?>("VerificationOtp")
                        .HasColumnType("int")
                        .HasColumnName("VerificationOTP");

                    b.HasKey("IndividualId");

                    b.HasIndex("EconomicActivitiesId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("NotificationMethodId");

                    b.HasIndex("RegisterationStatusId");

                    b.HasIndex("TaxPayerTypeId");

                    b.HasIndex(new[] { "TaxOfficeId" }, "IDX_IND_RIN_FL");

                    b.HasIndex(new[] { "TitleId" }, "IDX_IND_TITLE");

                    b.HasIndex(new[] { "TaxOfficeId" }, "IDX_IN_TOF");

                    b.ToTable("Individual", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateIndividualRIN");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.JtbIndividual", b =>
                {
                    b.Property<long>("JtbindividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("JTBIndividualID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JtbindividualId"));

                    b.Property<string>("Bvn")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("bvn");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("CountryName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_registration");

                    b.Property<string>("EmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email_address");

                    b.Property<string>("GenderName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("house_number");

                    b.Property<string>("LastName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Lganame")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LGAName");

                    b.Property<string>("MaritalStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MiddleName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("middle_name");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("nationality_name");

                    b.Property<string>("Nin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("nin");

                    b.Property<string>("Occupation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_1");

                    b.Property<string>("PhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_2");

                    b.Property<string>("SbirtName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SBIRt_name");

                    b.Property<string>("StateName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StateOfOrigin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StreetName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("street_name");

                    b.Property<string>("TaxAuthorityCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaxAuthorityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaxpayerPhoto")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("taxpayer_photo");

                    b.Property<string>("TaxpayerStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Tin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("tin");

                    b.Property<string>("Title")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("JtbindividualId");

                    b.ToTable("JTB_Individual", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.JtbIndividualOld", b =>
                {
                    b.Property<string>("BiometricDetails")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Dob")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DOB");

                    b.Property<int?>("EconomicActivitiesId")
                        .HasColumnType("int")
                        .HasColumnName("EconomicActivitiesID");

                    b.Property<string>("EconomicActivitiesName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmailAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<string>("GenderName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("IndividualId")
                        .HasColumnType("int")
                        .HasColumnName("IndividualID");

                    b.Property<string>("IndividualRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IndividualRIN");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MaritalStatusID");

                    b.Property<string>("MaritalStatusName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("MobileNumber1")
                        .HasColumnType("float");

                    b.Property<string>("MobileNumber2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int")
                        .HasColumnName("NationalityID");

                    b.Property<string>("NationalityName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("NotificationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationMethodID");

                    b.Property<string>("NotificationMethodName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Sn")
                        .HasColumnType("float")
                        .HasColumnName("SN");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<string>("TaxOfficeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Tin")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TIN");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleID");

                    b.Property<string>("TitleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("JTB_Individual_Old", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.JtbNonIndividual", b =>
                {
                    b.Property<long>("JtbnonIndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("JTBNonIndividualID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JtbnonIndividualId"));

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("city");

                    b.Property<DateTime?>("CommencementDate")
                        .HasColumnType("datetime")
                        .HasColumnName("commencement_date");

                    b.Property<string>("CountryName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfIncorporation")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_incorporation");

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_registration");

                    b.Property<string>("DirectorEmail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("director_email");

                    b.Property<string>("DirectorName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("director_name");

                    b.Property<string>("DirectorPhone")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("director_phone");

                    b.Property<string>("EmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email_address");

                    b.Property<string>("FinYrBegin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FinYrEnd")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("house_number");

                    b.Property<string>("Lganame")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LGAName");

                    b.Property<string>("LineOfBusinessCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("line_of_business_code");

                    b.Property<string>("LobName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("lob_name");

                    b.Property<string>("MainTradeName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("main_trade_name");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrgName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("org_name");

                    b.Property<string>("PhoneNo1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_1");

                    b.Property<string>("PhoneNo2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("phone_no_2");

                    b.Property<string>("RegisteredName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("registered_name");

                    b.Property<string>("RegistrationNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("registration_number");

                    b.Property<string>("StateName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StreetName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("street_name");

                    b.Property<string>("TaxAuthorityCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaxAuthorityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaxpayerStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Tin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("tin");

                    b.HasKey("JtbnonIndividualId");

                    b.ToTable("JTB_NonIndividual", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Land", b =>
                {
                    b.Property<int>("LandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LandID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<string>("COfORef")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("C_OF_O_Ref");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<int?>("LandDevelopmentId")
                        .HasColumnType("int")
                        .HasColumnName("LandDevelopmentID");

                    b.Property<int?>("LandFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("LandFunctionID");

                    b.Property<string>("LandOccupier")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("LandOwnershipId")
                        .HasColumnType("int")
                        .HasColumnName("LandOwnershipID");

                    b.Property<int?>("LandPurposeId")
                        .HasColumnType("int")
                        .HasColumnName("LandPurposeID");

                    b.Property<string>("LandRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LandRIN");

                    b.Property<decimal?>("LandSizeLength")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("LandSize_Length");

                    b.Property<decimal?>("LandSizeWidth")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("LandSize_Width");

                    b.Property<int?>("LandStreetConditionId")
                        .HasColumnType("int")
                        .HasColumnName("LandStreetConditionID");

                    b.Property<string>("Latitude")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("Lgaid")
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    b.Property<string>("Longitude")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PlotNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StreetName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("TownId")
                        .HasColumnType("int")
                        .HasColumnName("TownID");

                    b.Property<decimal?>("ValueOfLand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("WardID");

                    b.HasKey("LandId");

                    b.HasIndex("LandDevelopmentId");

                    b.HasIndex("LandFunctionId");

                    b.HasIndex("LandOwnershipId");

                    b.HasIndex("LandPurposeId");

                    b.HasIndex("LandStreetConditionId");

                    b.HasIndex("Lgaid");

                    b.HasIndex("TownId");

                    b.HasIndex("WardId");

                    b.HasIndex(new[] { "AssetTypeId" }, "IDX_LA");

                    b.ToTable("Land", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateLandRIN");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandDevelopment", b =>
                {
                    b.Property<int>("LandDevelopmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LandDevelopmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandDevelopmentId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LandDevelopmentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("LandDevelopmentId");

                    b.ToTable("Land_Development", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandFunction", b =>
                {
                    b.Property<int>("LandFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LandFunctionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandFunctionId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LandFunctionName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("LandPurposeId")
                        .HasColumnType("int")
                        .HasColumnName("LandPurposeID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("LandFunctionId");

                    b.HasIndex("LandPurposeId");

                    b.ToTable("Land_Function", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandOwnership", b =>
                {
                    b.Property<int>("LandOwnershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LandOwnershipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandOwnershipId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LandOwnershipName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("LandOwnershipId");

                    b.ToTable("Land_Ownership", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandPurpose", b =>
                {
                    b.Property<int>("LandPurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LandPurposeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandPurposeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LandPurposeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("LandPurposeId");

                    b.ToTable("Land_Purpose", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandStreetCondition", b =>
                {
                    b.Property<int>("LandStreetConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LandStreetConditionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LandStreetConditionId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LandStreetConditionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("LandStreetConditionId");

                    b.ToTable("Land_StreetCondition", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LateCharge", b =>
                {
                    b.Property<int>("LateChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LateChargeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LateChargeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("LateChargeId");

                    b.ToTable("Late_Charges", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Lga", b =>
                {
                    b.Property<int>("Lgaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Lgaid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LgaclassId")
                        .HasColumnType("int")
                        .HasColumnName("LGAClassID");

                    b.Property<string>("Lganame")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("LGAName");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Lgaid");

                    b.HasIndex("LgaclassId");

                    b.ToTable("LGA", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Lgaclass", b =>
                {
                    b.Property<int>("LgaclassId")
                        .HasColumnType("int")
                        .HasColumnName("LGAClassID");

                    b.Property<string>("LgaclassName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("LGAClassName");

                    b.HasKey("LgaclassId");

                    b.ToTable("LGAClass", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentAdjustment", b =>
                {
                    b.Property<long>("Aadid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AADID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Aadid"));

                    b.Property<long?>("Aaiid")
                        .HasColumnType("bigint")
                        .HasColumnName("AAIID");

                    b.Property<DateTime?>("AdjustmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AdjustmentLine")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AdjustmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AdjustmentTypeID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Aadid");

                    b.HasIndex("Aaiid");

                    b.ToTable("MAP_Assessment_Adjustment", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentAssessmentItem", b =>
                {
                    b.Property<long>("Aaiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AAIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Aaiid"));

                    b.Property<long?>("Aarid")
                        .HasColumnType("bigint")
                        .HasColumnName("AARID");

                    b.Property<int?>("AssessmentItemId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentStatusID");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TaxBaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Aaiid");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex(new[] { "AssessmentItemId" }, "IDX_AAI_AID");

                    b.HasIndex(new[] { "Aarid" }, "IDX_MAAI_AARID_AIID_TA");

                    b.HasIndex(new[] { "AssessmentItemId" }, "IDX_MAAI_AIID_AARID");

                    b.ToTable("MAP_Assessment_AssessmentItem", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentAssessmentRule", b =>
                {
                    b.Property<long>("Aarid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AARID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Aarid"));

                    b.Property<decimal?>("AssessmentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssessmentID");

                    b.Property<int?>("AssessmentRuleId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentRuleID");

                    b.Property<int?>("AssessmentYear")
                        .HasColumnType("int");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("AssetID");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.HasKey("Aarid");

                    b.HasIndex(new[] { "AssessmentId" }, "IDX_AAR_AID");

                    b.HasIndex(new[] { "AssessmentYear" }, "IDX_AAR_AY_AID");

                    b.HasIndex(new[] { "AssetTypeId", "AssetId" }, "IDX_MAAR_ATID_AID_AID");

                    b.ToTable("MAP_Assessment_AssessmentRule", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentLateCharge", b =>
                {
                    b.Property<long>("Alcid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ALCID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Alcid"));

                    b.Property<long?>("Aaiid")
                        .HasColumnType("bigint")
                        .HasColumnName("AAIID");

                    b.Property<DateTime?>("ChargeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Alcid");

                    b.ToTable("MAP_Assessment_LateCharge", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentRuleAssessmentItem", b =>
                {
                    b.Property<int>("Araiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ARAIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Araiid"));

                    b.Property<int?>("AssessmentItemId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemID");

                    b.Property<int?>("AssessmentRuleId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentRuleID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Araiid");

                    b.HasIndex("AssessmentItemId");

                    b.HasIndex("AssessmentRuleId");

                    b.ToTable("MAP_AssessmentRule_AssessmentItem", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentRuleSettlementMethod", b =>
                {
                    b.Property<int>("Arsmid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ARSMID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Arsmid"));

                    b.Property<int?>("AssessmentRuleId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentRuleID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SettlementMethodId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementMethodID");

                    b.HasKey("Arsmid");

                    b.HasIndex("AssessmentRuleId");

                    b.HasIndex("SettlementMethodId");

                    b.ToTable("MAP_AssessmentRule_SettlementMethod", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapBuildingBuildingUnit", b =>
                {
                    b.Property<long>("Bbuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BBUID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Bbuid"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<int?>("BuildingUnitId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingUnitID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Bbuid");

                    b.HasIndex("BuildingId");

                    b.HasIndex("BuildingUnitId");

                    b.ToTable("MAP_Building_BuildingUnit", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapBuildingLand", b =>
                {
                    b.Property<long>("Blid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BLID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Blid"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LandId")
                        .HasColumnType("int")
                        .HasColumnName("LandID");

                    b.HasKey("Blid");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LandId");

                    b.ToTable("MAP_Building_Land", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapBusinessBuilding", b =>
                {
                    b.Property<long>("Bbid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BBID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Bbid"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<int?>("BuildingUnitId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingUnitID");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Bbid");

                    b.HasIndex("BuildingId");

                    b.HasIndex("BusinessId");

                    b.ToTable("MAP_Business_Building", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateCustomField", b =>
                {
                    b.Property<int>("Ccfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CCFID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ccfid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ctfid")
                        .HasColumnType("int")
                        .HasColumnName("CTFID");

                    b.Property<string>("FieldValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Ccfid");

                    b.HasIndex("CertificateId");

                    b.HasIndex("Ctfid");

                    b.ToTable("MAP_Certificate_CustomField", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateGenerate", b =>
                {
                    b.Property<long>("Cgid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CGID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Cgid"));

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<string>("CertificatePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsExpirable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Cgid");

                    b.HasIndex("CertificateId");

                    b.ToTable("MAP_Certificate_Generate", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateGenerateField", b =>
                {
                    b.Property<long>("Cgfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CGFID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Cgfid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<long?>("Cgid")
                        .HasColumnType("bigint")
                        .HasColumnName("CGID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("FieldID");

                    b.Property<string>("FieldValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Pfid")
                        .HasColumnType("int")
                        .HasColumnName("PFID");

                    b.HasKey("Cgfid");

                    b.HasIndex("Cgid");

                    b.ToTable("MAP_Certificate_Generate_Field", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateIssue", b =>
                {
                    b.Property<long>("Ciid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Ciid"));

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Ciid");

                    b.HasIndex("CertificateId");

                    b.ToTable("MAP_Certificate_Issue", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateRevoke", b =>
                {
                    b.Property<long>("Crid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CRID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Crid"));

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Crid");

                    b.HasIndex("CertificateId");

                    b.ToTable("MAP_Certificate_Revoke", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateSeal", b =>
                {
                    b.Property<long>("Csid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Csid"));

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Csid");

                    b.HasIndex("CertificateId");

                    b.ToTable("MAP_Certificate_Seal", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateSignDigital", b =>
                {
                    b.Property<long>("Csdid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CSDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Csdid"));

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Csdid");

                    b.HasIndex("CertificateId");

                    b.ToTable("MAP_Certificate_SignDigital", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateSignVisible", b =>
                {
                    b.Property<long>("Csvid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CSVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Csvid"));

                    b.Property<string>("AdditionalSignatureLocation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentWidth")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SignSourceId")
                        .HasColumnType("int")
                        .HasColumnName("SignSourceID");

                    b.Property<int?>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Csvid");

                    b.ToTable("MAP_Certificate_SignVisible", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateStage", b =>
                {
                    b.Property<long>("Csid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Csid"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("StageID");

                    b.HasKey("Csid");

                    b.HasIndex("CertificateId");

                    b.ToTable("MAP_Certificate_Stages", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateTypeField", b =>
                {
                    b.Property<int>("Ctfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CTFID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ctfid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CertificateTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CertificateTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FieldComboValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FieldSlug")
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<int?>("FieldTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FieldTypeID");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Ctfid")
                        .HasName("PK_MST_ReceiverOption");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("MAP_CertificateType_Field", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateTypeItem", b =>
                {
                    b.Property<int>("Ctiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CTIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ctiid"));

                    b.Property<int?>("CertificateTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CertificateTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Ctiid");

                    b.ToTable("MAP_CertificateType_Items", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateValidate", b =>
                {
                    b.Property<long>("Cvid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Cvid"));

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Cvid");

                    b.HasIndex("CertificateId");

                    b.ToTable("MAP_Certificate_Validate", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCompanyAddressInformation", b =>
                {
                    b.Property<int>("Caiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CAIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Caiid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Caiid");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CompanyId");

                    b.ToTable("MAP_Company_AddressInformation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapDirectoratesRevenueStream", b =>
                {
                    b.Property<int>("Drsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DRSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Drsid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorateID");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.HasKey("Drsid")
                        .HasName("PK_MAP_Directorate_RevenueStream");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("RevenueStreamId");

                    b.ToTable("MAP_Directorates_RevenueStream", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapGovernmentAddressInformation", b =>
                {
                    b.Property<int>("Gaiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GAIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gaiid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("GovernmentId")
                        .HasColumnType("int")
                        .HasColumnName("GovernmentID");

                    b.HasKey("Gaiid");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("GovernmentId");

                    b.ToTable("MAP_Government_AddressInformation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapIndividualAddressInformation", b =>
                {
                    b.Property<int>("Iaiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IAIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iaiid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IndividualId")
                        .HasColumnType("int")
                        .HasColumnName("IndividualID");

                    b.HasKey("Iaiid");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("IndividualId");

                    b.ToTable("MAP_Individual_AddressInformation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapMdaserviceMdaserviceItem", b =>
                {
                    b.Property<int>("Msmsiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MSMSIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Msmsiid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MdaserviceId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceID");

                    b.Property<int?>("MdaserviceItemId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceItemID");

                    b.HasKey("Msmsiid");

                    b.HasIndex("MdaserviceItemId");

                    b.HasIndex(new[] { "MdaserviceId" }, "IDX_MDAServiceItem_mdaservice");

                    b.ToTable("MAP_MDAService_MDAServiceItem", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapMdaserviceSettlementMethod", b =>
                {
                    b.Property<int>("Arsmid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ARSMID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Arsmid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MdaserviceId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceID");

                    b.Property<int?>("SettlementMethodId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementMethodID");

                    b.HasKey("Arsmid");

                    b.HasIndex("SettlementMethodId");

                    b.HasIndex(new[] { "MdaserviceId" }, "IDX_MDA_SMTHD");

                    b.ToTable("MAP_MDAService_SettlementMethod", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapPaymentAccountOperation", b =>
                {
                    b.Property<int>("Poaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("POAID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Poaid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FromSettlementMethodId")
                        .HasColumnType("int")
                        .HasColumnName("From_SettlementMethodID");

                    b.Property<int?>("FromTaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("From_TaxPayerID");

                    b.Property<int?>("FromTaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("From_TaxPayerTypeID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedDate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OperationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("OperationTypeID");

                    b.Property<int>("PoaaccountId")
                        .HasColumnType("int")
                        .HasColumnName("POAAccountId");

                    b.Property<long?>("ToBillId")
                        .HasColumnType("bigint")
                        .HasColumnName("To_BillID");

                    b.Property<int?>("ToBillTypeId")
                        .HasColumnType("int")
                        .HasColumnName("To_BillTypeID");

                    b.Property<int?>("ToTaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("To_TaxPayerID");

                    b.Property<int?>("ToTaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("To_TaxPayerTypeID");

                    b.HasKey("Poaid");

                    b.ToTable("MAP_PaymentAccount_Operation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillAdjustment", b =>
                {
                    b.Property<long>("Sadid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SADID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sadid"));

                    b.Property<DateTime?>("AdjustmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AdjustmentLine")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AdjustmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AdjustmentTypeID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Sbsiid")
                        .HasColumnType("bigint")
                        .HasColumnName("SBSIID");

                    b.HasKey("Sadid");

                    b.HasIndex("Sbsiid");

                    b.ToTable("MAP_ServiceBill_Adjustment", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillLateCharge", b =>
                {
                    b.Property<long>("Slcid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SLCID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Slcid"));

                    b.Property<DateTime?>("ChargeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("Sbsiid")
                        .HasColumnType("bigint")
                        .HasColumnName("SBSIID");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Slcid");

                    b.HasIndex("Sbsiid");

                    b.ToTable("MAP_ServiceBill_LateCharge", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillMdaservice", b =>
                {
                    b.Property<long>("Sbsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SBSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sbsid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MdaserviceId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ServiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("ServiceBillId")
                        .HasColumnType("bigint")
                        .HasColumnName("ServiceBillID");

                    b.Property<int?>("ServiceBillYear")
                        .HasColumnType("int");

                    b.HasKey("Sbsid");

                    b.HasIndex("MdaserviceId");

                    b.HasIndex(new[] { "ServiceBillId" }, "IDX_SMS_SBID");

                    b.ToTable("MAP_ServiceBill_MDAService", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillMdaserviceItem", b =>
                {
                    b.Property<long>("Sbsiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SBSIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sbsiid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MdaserviceItemId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceItemID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentStatusID");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("Sbsid")
                        .HasColumnType("bigint")
                        .HasColumnName("SBSID");

                    b.Property<decimal?>("ServiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ServiceBaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Sbsiid");

                    b.HasIndex(new[] { "Sbsid" }, "IDX_SB_MSI_SBSID");

                    b.HasIndex(new[] { "MdaserviceItemId" }, "IDX_SB_MSI_SIID");

                    b.ToTable("MAP_ServiceBill_MDAServiceItem", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapSettlementSettlementItem", b =>
                {
                    b.Property<long>("Siid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Siid"));

                    b.Property<long?>("Aaiid")
                        .HasColumnType("bigint")
                        .HasColumnName("AAIID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Sbsiid")
                        .HasColumnType("bigint")
                        .HasColumnName("SBSIID");

                    b.Property<decimal?>("SettlementAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementID");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Siid");

                    b.HasIndex(new[] { "Aaiid" }, "IDX_SSI_AAIID_iSID_iSAMT");

                    b.HasIndex(new[] { "Sbsiid" }, "IDX_SSI_SBSIID_SID_SA");

                    b.HasIndex(new[] { "SettlementId" }, "IDX_SSI_SID_AID_SA");

                    b.ToTable("MAP_Settlement_SettlementItem", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapSpecialAddressInformation", b =>
                {
                    b.Property<int>("Saiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SAIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Saiid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SpecialId")
                        .HasColumnType("int")
                        .HasColumnName("SpecialID");

                    b.HasKey("Saiid");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("SpecialId");

                    b.ToTable("MAP_Special_AddressInformation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxOfficeTarget", b =>
                {
                    b.Property<long>("Totid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TOTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Totid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<decimal?>("TargetAmount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Totid");

                    b.HasIndex("RevenueStreamId");

                    b.HasIndex("TaxOfficeId");

                    b.ToTable("MAP_TaxOffice_Target", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxOfficerTarget", b =>
                {
                    b.Property<long>("Totid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TOTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Totid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<decimal?>("TargetAmount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficerID");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Totid");

                    b.HasIndex("RevenueStreamId");

                    b.HasIndex("TaxOfficeId");

                    b.ToTable("MAP_TaxOfficer_Target", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerAsset", b =>
                {
                    b.Property<long>("Tpaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TPAID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Tpaid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("AssetID");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("BuildingUnitId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingUnitID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerRoleId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerRoleID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("Tpaid");

                    b.HasIndex("TaxPayerId");

                    b.HasIndex("TaxPayerRoleId");

                    b.HasIndex(new[] { "AssetTypeId", "AssetId" }, "IDX_ATA");

                    b.HasIndex(new[] { "AssetId", "Active" }, "IDX_MTPA_AID_A_TPTID_TPID_ATID");

                    b.HasIndex(new[] { "Active" }, "IDX_MTPA_A_TPTID_TPID_ATID_AID");

                    b.ToTable("MAP_TaxPayer_Asset", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerAssetProfile", b =>
                {
                    b.Property<long>("Tpapid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TPAPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Tpapid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<long?>("Tpaid")
                        .HasColumnType("bigint")
                        .HasColumnName("TPAID");

                    b.HasKey("Tpapid");

                    b.HasIndex(new[] { "Tpaid" }, "IDX_TPAP_PROF");

                    b.HasIndex(new[] { "ProfileId" }, "IDX_TPA_Profile");

                    b.ToTable("MAP_TaxPayer_Asset_Profile", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerAssetProfilePt", b =>
                {
                    b.Property<long>("Tpapptid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TPAPPTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Tpapptid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<long?>("Tpaid")
                        .HasColumnType("bigint")
                        .HasColumnName("TPAID");

                    b.HasKey("Tpapptid")
                        .HasName("MAP_TaxPayer_Asset_Profile_TempPT");

                    b.HasIndex(new[] { "Tpaid" }, "IDX_A_P_PT");

                    b.ToTable("MAP_TaxPayer_Asset_Profile_PT", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerDocument", b =>
                {
                    b.Property<long>("Tpdid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TPDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Tpdid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DocumentRefNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("Tpdid");

                    b.ToTable("MAP_TaxPayer_Document", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateDocumentRef");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerMessage", b =>
                {
                    b.Property<long>("Tpmid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TPMID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Tpmid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("MessageDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReceiverStaffId")
                        .HasColumnType("int")
                        .HasColumnName("Receiver_StaffID");

                    b.Property<int?>("ReceiverTaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("Receiver_TaxPayerID");

                    b.Property<int?>("ReceiverTaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Receiver_TaxPayerTypeID");

                    b.Property<int?>("SenderStaffId")
                        .HasColumnType("int")
                        .HasColumnName("Sender_StaffID");

                    b.Property<int?>("SenderTaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("Sender_TaxPayerID");

                    b.Property<int?>("SenderTaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Sender_TaxPayerTypeID");

                    b.HasKey("Tpmid");

                    b.ToTable("MAP_TaxPayer_Message", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerMessageDocument", b =>
                {
                    b.Property<long>("Tpmdid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TPMDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Tpmdid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Tpmid")
                        .HasColumnType("bigint")
                        .HasColumnName("TPMID");

                    b.HasKey("Tpmdid");

                    b.HasIndex("Tpmid");

                    b.ToTable("MAP_TaxPayer_Message_Document", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerReview", b =>
                {
                    b.Property<long>("Tprid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TPRID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Tprid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReviewStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewStatusID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Tprid");

                    b.ToTable("MAP_TaxPayer_Review", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestGenerate", b =>
                {
                    b.Property<long>("Rgid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RGID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rgid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsExpirable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("Rgid");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_Generate", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestGenerateField", b =>
                {
                    b.Property<long>("Rgfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RGFID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rgfid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("FieldID");

                    b.Property<string>("FieldValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Pfid")
                        .HasColumnType("int")
                        .HasColumnName("PFID");

                    b.Property<long?>("Rgid")
                        .HasColumnType("bigint")
                        .HasColumnName("RGID");

                    b.HasKey("Rgfid");

                    b.HasIndex("Rgid");

                    b.ToTable("MAP_TCCRequest_Generate_Field", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestGenerateTccdetail", b =>
                {
                    b.Property<long>("GtccdetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("GTCCDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GtccdetailId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("GtccdetailId");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_GenerateTCCDetail", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestIncomeStream", b =>
                {
                    b.Property<long>("Trisid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TRISID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trisid"));

                    b.Property<string>("BusinessAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessID");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BusinessNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("BusinessOperationId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessOperationID");

                    b.Property<int?>("BusinessTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessTypeID");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Lgaid")
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxPayerRoleId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerRoleID");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.Property<long?>("TccrequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("TCCRequestID");

                    b.Property<decimal?>("TotalIncomeEarned")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Trisid");

                    b.ToTable("MAP_TCCRequest_IncomeStream", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestIssue", b =>
                {
                    b.Property<long>("Riid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Riid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("Riid");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_Issue", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestNote", b =>
                {
                    b.Property<long>("Rnid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RNID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rnid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("NotesDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.Property<int?>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    b.HasKey("Rnid");

                    b.ToTable("MAP_TCCRequest_Notes", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestNotesDocument", b =>
                {
                    b.Property<long>("Rndid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RNDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rndid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Rnid")
                        .HasColumnType("bigint")
                        .HasColumnName("RNID");

                    b.HasKey("Rndid");

                    b.HasIndex("Rnid");

                    b.ToTable("MAP_TCCRequest_Notes_Document", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestPrepareTccdraft", b =>
                {
                    b.Property<long>("PtccdraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PTCCDraftID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PtccdraftId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("PtccdraftId");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_PrepareTCCDraft", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestRevoke", b =>
                {
                    b.Property<long>("Rrid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RRID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rrid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("Rrid");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_Revoke", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestSeal", b =>
                {
                    b.Property<long>("Rsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rsid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("Rsid");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_Seal", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestSignDigital", b =>
                {
                    b.Property<long>("Rsdid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RSDID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rsdid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("Rsdid");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_SignDigital", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestSignVisible", b =>
                {
                    b.Property<long>("Rsvid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RSVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rsvid"));

                    b.Property<string>("AdditionalSignatureLocation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentWidth")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SignSourceId")
                        .HasColumnType("int")
                        .HasColumnName("SignSourceID");

                    b.Property<int?>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Rsvid");

                    b.ToTable("MAP_TCCRequest_SignVisible", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestStage", b =>
                {
                    b.Property<long>("Rsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rsid"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("StageID");

                    b.HasKey("Rsid");

                    b.ToTable("MAP_TCCRequest_Stages", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestValidate", b =>
                {
                    b.Property<long>("Rvid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rvid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("Rvid");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_Validate", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestValidateTaxPayerIncome", b =>
                {
                    b.Property<long>("VtpincomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("VTPIncomeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VtpincomeId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("VtpincomeId");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_ValidateTaxPayerIncome", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestValidateTaxPayerInformation", b =>
                {
                    b.Property<long>("VtpinformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("VTPInformationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VtpinformationId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("VtpinformationId");

                    b.HasIndex("RequestId");

                    b.ToTable("MAP_TCCRequest_ValidateTaxPayerInformation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTreasuryReceiptSettlement", b =>
                {
                    b.Property<long>("Rsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Rsid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReceiptId")
                        .HasColumnType("bigint")
                        .HasColumnName("ReceiptID");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementID");

                    b.HasKey("Rsid");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("SettlementId");

                    b.ToTable("MAP_TreasuryReceipt_Settlement", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MaritalStatusID");

                    b.Property<string>("MaritalStatusName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("MaritalStatusId");

                    b.ToTable("MaritalStatus", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MdaService", b =>
                {
                    b.Property<int>("MdaserviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MdaserviceId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MdaserviceCode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("MDAServiceCode");

                    b.Property<string>("MdaserviceName")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)")
                        .HasColumnName("MDAServiceName");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentFrequencyId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentFrequencyID");

                    b.Property<int?>("PaymentOptionId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentOptionID");

                    b.Property<int?>("RuleRunId")
                        .HasColumnType("int")
                        .HasColumnName("RuleRunID");

                    b.Property<decimal?>("ServiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("MdaserviceId");

                    b.HasIndex("PaymentFrequencyId");

                    b.HasIndex("PaymentOptionId");

                    b.HasIndex("RuleRunId");

                    b.ToTable("MDA_Services", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateMDAServiceCode");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MdaServiceItem", b =>
                {
                    b.Property<int>("MdaserviceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MdaserviceItemId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<int?>("AssessmentItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemCategoryID");

                    b.Property<int?>("AssessmentItemSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentItemSubCategoryID");

                    b.Property<int>("ComputationId")
                        .HasColumnType("int")
                        .HasColumnName("ComputationID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MdaserviceItemName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MDAServiceItemName");

                    b.Property<string>("MdaserviceItemReferenceNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("MDAServiceItemReferenceNo");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<int?>("RevenueSubStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueSubStreamID");

                    b.Property<decimal?>("ServiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ServiceBaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("MdaserviceItemId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AssessmentItemCategoryId");

                    b.HasIndex("AssessmentItemSubCategoryId");

                    b.HasIndex("ComputationId");

                    b.HasIndex("RevenueStreamId");

                    b.HasIndex("RevenueSubStreamId");

                    b.ToTable("MDA_Service_Items", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateMDAServiceItemRefNo");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstCertificateStage", b =>
                {
                    b.Property<int>("CertificateStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CertificateStageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateStageId"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CertificateStageName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("CertificateStageId");

                    b.ToTable("MST_CertificateStage", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstCertificateStatus", b =>
                {
                    b.Property<int>("CertificateStatusId")
                        .HasColumnType("int")
                        .HasColumnName("CertificateStatusID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CertificateStatusName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CertificateStatusId");

                    b.ToTable("MST_CertificateStatus", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstComputation", b =>
                {
                    b.Property<int>("ComputationId")
                        .HasColumnType("int")
                        .HasColumnName("ComputationID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ComputationName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ComputationId");

                    b.ToTable("MST_Computation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstEmailStack", b =>
                {
                    b.Property<int>("EmailStackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailStackId"));

                    b.Property<string>("AttachmentName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AttachmentPath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EmailSendCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmailSendOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("EmailSentSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("FromAddress")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToBcc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToBCC");

                    b.Property<string>("ToBccname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToBCCName");

                    b.Property<string>("ToCc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToCC");

                    b.Property<string>("ToCcname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToCCName");

                    b.Property<string>("ToName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailStackId");

                    b.ToTable("MST_EmailStack", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstFieldType", b =>
                {
                    b.Property<int>("FieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FieldTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldTypeId"));

                    b.Property<string>("FieldTypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("FieldTypeId");

                    b.ToTable("MST_FieldType", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstLastNumber", b =>
                {
                    b.Property<int>("LastId")
                        .HasColumnType("int")
                        .HasColumnName("LastID");

                    b.Property<string>("LastNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LastNumberType")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("LastId");

                    b.ToTable("MST_LastNumber", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstPaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentStatusID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentStatusName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("MST_PaymentStatus", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstRegisterationStatus", b =>
                {
                    b.Property<int>("RegisterationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RegisterationStatusID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegisterationStatusName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("RegisterationStatusId");

                    b.ToTable("MST_RegisterationStatus", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstRuleRun", b =>
                {
                    b.Property<int>("RuleRunId")
                        .HasColumnType("int")
                        .HasColumnName("RuleRunID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RuleRunName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("RuleRunId");

                    b.ToTable("MST_RuleRun", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstTccrequestStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("StatusId");

                    b.ToTable("MST_TCCRequestStatus", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstTccstage", b =>
                {
                    b.Property<int>("TccstageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TCCStageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TccstageId"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TccstageName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TCCStageName");

                    b.HasKey("TccstageId");

                    b.ToTable("MST_TCCStage", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstTccstatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("StatusId");

                    b.ToTable("MST_TCCStatus", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .HasColumnType("int")
                        .HasColumnName("NationalityID");

                    b.Property<string>("NationalityName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationality", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.NewErastccHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentYear")
                        .HasColumnType("int");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Lga")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LGA");

                    b.Property<string>("Rin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RIN");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalIncomeEarned")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("NewERASTccHolder", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.NewId", b =>
                {
                    b.Property<Guid?>("Newid1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("newid");

                    b.Property<double?>("Rand")
                        .HasColumnType("float")
                        .HasColumnName("rand");

                    b.ToTable((string)null);

                    b.ToView("NewID", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NotificationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationMethodID");

                    b.Property<int?>("NotificationModeId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationModeID");

                    b.Property<string>("NotificationRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("NotificationStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationTypeID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notification");

                    b.HasIndex("NotificationMethodId");

                    b.HasIndex("NotificationModeId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasTrigger("TRG_GenerateNotificationRefCode");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.NotificationMethod", b =>
                {
                    b.Property<int>("NotificationMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationMethodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationMethodId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationMethodName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("NotificationMethodId");

                    b.ToTable("Notification_Method", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.NotificationMode", b =>
                {
                    b.Property<int>("NotificationModeId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationModeID");

                    b.Property<string>("NotificationModeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("NotificationModeId");

                    b.ToTable("Notification_Mode", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypeDescription")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("Notification_Type", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.OperationType", b =>
                {
                    b.Property<int>("OperationTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Operation_TypesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationTypesId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("OperationTypesName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Operation_TypesName");

                    b.HasKey("OperationTypesId");

                    b.ToTable("Operation_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.PayDirectNotification", b =>
                {
                    b.Property<long>("PdinotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDINotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PdinotificationId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestParameter")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("PdinotificationId");

                    b.ToTable("PayDirect_Notifications", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.PayeTccHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AnnualGross")
                        .HasColumnType("float");

                    b.Property<double?>("AnnualTax")
                        .HasColumnType("float");

                    b.Property<double?>("AnnualTaxIi")
                        .HasColumnType("float")
                        .HasColumnName("AnnualTaxII");

                    b.Property<string>("AssessmentYear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("ChargeableIncome")
                        .HasColumnType("float");

                    b.Property<double?>("Cra")
                        .HasColumnType("float");

                    b.Property<string>("IndividualRin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IndividualRIN");

                    b.Property<double?>("MonthlyTax")
                        .HasColumnType("float");

                    b.Property<string>("ReceiptDetail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RowId")
                        .HasColumnType("int")
                        .HasColumnName("RowID");

                    b.Property<double?>("TaxFreePay")
                        .HasColumnType("float");

                    b.Property<double?>("ValidatedNhf")
                        .HasColumnType("float");

                    b.Property<double?>("ValidatedNhis")
                        .HasColumnType("float");

                    b.Property<double?>("ValidatedPension")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("PayeTccHolder", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.PaymentAccount", b =>
                {
                    b.Property<long>("PaymentAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentAccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentAccountId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsManualEntry")
                        .HasColumnType("bit")
                        .HasColumnName("isManualEntry");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<int?>("RevenueSubStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueSubStreamID");

                    b.Property<int?>("SettlementMethodId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementMethodID");

                    b.Property<int?>("SettlementStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementStatusID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("TransactionRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("PaymentAccountId");

                    b.HasIndex("RevenueSubStreamId");

                    b.HasIndex("SettlementStatusId");

                    b.HasIndex(new[] { "RevenueStreamId" }, "IDX_POA_RSID_TPTID_TPID_A_SMID_PD");

                    b.HasIndex(new[] { "SettlementMethodId" }, "IDX_PoA_SMID");

                    b.HasIndex(new[] { "TaxPayerTypeId", "TaxPayerId" }, "IDX_PoA_TPTID_TPID");

                    b.HasIndex(new[] { "RevenueStreamId", "PaymentDate" }, "IX_PA_RSID_PD");

                    b.ToTable("Payment_Account", null, t =>
                        {
                            t.HasTrigger("TRG_GeneratePOARef");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.PaymentFrequency", b =>
                {
                    b.Property<int>("PaymentFrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentFrequencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentFrequencyId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentFrequencyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PaymentFrequencyId");

                    b.ToTable("Payment_Frequency", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.PaymentOption", b =>
                {
                    b.Property<int>("PaymentOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentOptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentOptionId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentOptionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PaymentOptionId");

                    b.ToTable("Payment_Options", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("AssetTypeStatus")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProfileDescription")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ProfileReferenceNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ProfileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileTypeID");

                    b.HasKey("ProfileId");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("Profiles", t =>
                        {
                            t.HasTrigger("TRG_GenerateProfileRefNo");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileAttribute", b =>
                {
                    b.Property<int>("ProfileAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileAttributeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileAttributeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.HasKey("ProfileAttributeId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileAttribute", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileGroup", b =>
                {
                    b.Property<int>("ProfileGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileGroupId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.HasKey("ProfileGroupId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileGroup", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSector", b =>
                {
                    b.Property<int>("ProfileSectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileSectorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileSectorId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int")
                        .HasColumnName("SectorID");

                    b.HasKey("ProfileSectorId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileSector", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSectorElement", b =>
                {
                    b.Property<int>("ProfileSectorElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileSectorElementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileSectorElementId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("SectorElementId")
                        .HasColumnType("int")
                        .HasColumnName("SectorElementID");

                    b.HasKey("ProfileSectorElementId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileSectorElement", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSectorSubElement", b =>
                {
                    b.Property<int>("ProfileSectorSubElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileSectorSubElementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileSectorSubElementId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("SectorSubElementId")
                        .HasColumnType("int")
                        .HasColumnName("SectorSubElementID");

                    b.HasKey("ProfileSectorSubElementId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileSectorSubElement", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSubAttribute", b =>
                {
                    b.Property<int>("ProfileSubAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileSubAttributeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileSubAttributeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("SubAttributeId")
                        .HasColumnType("int")
                        .HasColumnName("SubAttributeID");

                    b.HasKey("ProfileSubAttributeId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileSubAttribute", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSubGroup", b =>
                {
                    b.Property<int>("ProfileSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileSubGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileSubGroupId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("SubGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SubGroupID");

                    b.HasKey("ProfileSubGroupId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileSubGroup", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSubSector", b =>
                {
                    b.Property<int>("ProfileSubSectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileSubSectorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileSubSectorId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("SubSectorId")
                        .HasColumnType("int")
                        .HasColumnName("SubSectorID");

                    b.HasKey("ProfileSubSectorId");

                    b.HasIndex(new[] { "ProfileId" }, "IDX_ProfileSubSector");

                    b.ToTable("ProfileSubSector", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileTaxPayerRole", b =>
                {
                    b.Property<int>("ProfileTaxPayerRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileTaxPayerRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileTaxPayerRoleId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("TaxPayerRoleId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerRoleID");

                    b.HasKey("ProfileTaxPayerRoleId");

                    b.HasIndex(new[] { "ProfileId" }, "IDX_ProfileTaxPayerRole");

                    b.ToTable("ProfileTaxPayerRole", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileTaxPayerType", b =>
                {
                    b.Property<int>("ProfileTaxPayerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileTaxPayerTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileTaxPayerTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("ProfileTaxPayerTypeId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileTaxPayerType", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileType", b =>
                {
                    b.Property<int>("ProfileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProfileTypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ProfileTypeId");

                    b.ToTable("Profile_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfilesBkp", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("AssetTypeStatus")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProfileDescription")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ProfileReferenceNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ProfileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileTypeID");

                    b.HasKey("ProfileId");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("Profiles_BKP", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateProfileRefNo_BKP");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ReceiptStatus", b =>
                {
                    b.Property<int>("ReceiptStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReceiptStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptStatusId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiptStatusName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ReceiptStatusId");

                    b.ToTable("Receipt_Status", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.RevenueStream", b =>
                {
                    b.Property<int>("RevenueStreamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RevenueStreamId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BillTemplatePath")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnableBillNotification")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NotificationPeriod")
                        .HasColumnType("int");

                    b.Property<string>("RevenueStreamName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Smscontent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SMSContent");

                    b.HasKey("RevenueStreamId");

                    b.ToTable("Revenue_Stream", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.RevenueSubStream", b =>
                {
                    b.Property<int>("RevenueSubStreamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RevenueSubStreamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RevenueSubStreamId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<string>("RevenueSubStreamName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RevenueSubStreamId");

                    b.HasIndex("RevenueStreamId");

                    b.ToTable("Revenue_SubStream", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ReviewStatus", b =>
                {
                    b.Property<int>("ReviewStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewStatusId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReviewStatusName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ReviewStatusId");

                    b.ToTable("Review_Status", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.RinCheck", b =>
                {
                    b.Property<string>("CompanyRin")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Company RIN");

                    b.Property<string>("IndividualRin")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Individual RIN");

                    b.Property<double?>("PhoneNumber")
                        .HasColumnType("float")
                        .HasColumnName("PHONE_NUMBER");

                    b.ToTable("RIN_Check", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ScratchCardDealer", b =>
                {
                    b.Property<int>("ScratchCardDealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScratchCardDealerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScratchCardDealerId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("AgreedCommissionPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DealerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DealerTypeID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ScratchCardDealerName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ScratchCardDealerId");

                    b.ToTable("Scratch_Card_Dealers", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ScratchCardPrinter", b =>
                {
                    b.Property<int>("ScratchCardPrinterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScratchCardPrinterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScratchCardPrinterId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("AgreedUnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ScratchCardPrinterName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ScratchCardPrinterId");

                    b.ToTable("Scratch_Card_Printer", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ScratchCardPurchaseRequest", b =>
                {
                    b.Property<int>("ScprequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SCPRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScprequestId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Commission")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DealerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DealerTypeID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentStatusID");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestReferenceNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("RequestedQty")
                        .HasColumnType("int");

                    b.Property<int?>("ScratchCardDealerId")
                        .HasColumnType("int")
                        .HasColumnName("ScratchCardDealerID");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ScprequestId");

                    b.ToTable("ScratchCard_PurchaseRequest", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ServiceBill", b =>
                {
                    b.Property<long>("ServiceBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ServiceBillID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ServiceBillId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BillPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<decimal?>("ServiceBillAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ServiceBillDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ServiceBillRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SettlementDueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SettlementStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementStatusID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("ServiceBillId");

                    b.HasIndex(new[] { "TaxPayerTypeId" }, "IDX_SB_TPTID");

                    b.HasIndex(new[] { "TaxPayerTypeId", "TaxPayerId" }, "IDX_SB_TPTID_TPID");

                    b.ToTable("ServiceBill", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateServiceBillCode");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Settlement", b =>
                {
                    b.Property<int>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettlementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<long?>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssessmentID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ServiceBillId")
                        .HasColumnType("bigint")
                        .HasColumnName("ServiceBillID");

                    b.Property<decimal?>("SettlementAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SettlementMethodId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementMethodID");

                    b.Property<string>("SettlementNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SettlementRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TransactionRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("SettlementId");

                    b.HasIndex(new[] { "SettlementMethodId", "SettlementDate" }, "IDX_SMT_SMID_SD_AID_SAMT");

                    b.HasIndex(new[] { "SettlementMethodId", "SettlementDate" }, "IDX_SMT_SMID_SD_ISBID_ISAMT");

                    b.HasIndex(new[] { "SettlementMethodId", "SettlementDate" }, "IDX_ST_SMD_SD");

                    b.HasIndex(new[] { "Active" }, "IDX_Settlement_cActive");

                    b.HasIndex(new[] { "AssessmentId" }, "IDX_Settlment_Assessment");

                    b.HasIndex(new[] { "ServiceBillId" }, "IDX_Settlment_ServiceBill");

                    b.ToTable("Settlement", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateSettlementCode");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SettlementMethod", b =>
                {
                    b.Property<int>("SettlementMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettlementMethodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementMethodId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SettlementMethodName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SettlementMethodId");

                    b.ToTable("Settlement_Method", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SettlementStatus", b =>
                {
                    b.Property<int>("SettlementStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettlementStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementStatusId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SettlementStatusName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("SettlementStatusId");

                    b.ToTable("Settlement_Status", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SftpDataSubmission", b =>
                {
                    b.Property<int>("DataSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataSubmissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataSubmissionId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSubmissionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DataSubmissionTypeID");

                    b.Property<int?>("DataSubmitterId")
                        .HasColumnType("int")
                        .HasColumnName("DataSubmitterID");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmissionRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("DataSubmissionId");

                    b.HasIndex("DataSubmissionTypeId");

                    b.HasIndex("DataSubmitterId");

                    b.ToTable("SFTP_DataSubmission", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateSubmissionRefNo");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SftpDataSubmissionType", b =>
                {
                    b.Property<int>("DataSubmissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataSubmissionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataSubmissionTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DataSubmissionTypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TemplateFilePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("DataSubmissionTypeId");

                    b.ToTable("SFTP_DataSubmissionType", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SftpDataSubmitter", b =>
                {
                    b.Property<int>("DataSubmitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataSubmitterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataSubmitterId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Rin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RIN");

                    b.Property<string>("UserName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("DataSubmitterId");

                    b.ToTable("SFTP_DataSubmitter", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SftpMapDataSubmitterDataSubmissionType", b =>
                {
                    b.Property<long>("Dstdsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("DSTDSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Dstdsid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSubmissionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DataSubmissionTypeID");

                    b.Property<int?>("DataSubmitterId")
                        .HasColumnType("int")
                        .HasColumnName("DataSubmitterID");

                    b.HasKey("Dstdsid");

                    b.HasIndex("DataSubmissionTypeId");

                    b.HasIndex("DataSubmitterId");

                    b.ToTable("SFTP_MAP_DataSubmitter_DataSubmissionType", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SizeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SizeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Special", b =>
                {
                    b.Property<int>("SpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpecialID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NotificationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationMethodID");

                    b.Property<string>("SpecialRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SpecialRIN");

                    b.Property<string>("SpecialTaxPayerName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("Tin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TIN");

                    b.HasKey("SpecialId");

                    b.HasIndex("NotificationMethodId");

                    b.HasIndex("TaxOfficeId");

                    b.HasIndex("TaxPayerTypeId");

                    b.ToTable("Special", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateSpecialRIN");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SystemRole", b =>
                {
                    b.Property<int>("SystemRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SystemRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemRoleId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SystemRoleName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("SystemRoleId");

                    b.ToTable("SystemRole", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SystemUser", b =>
                {
                    b.Property<int>("SystemUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SystemUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemUserId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SystemRoleId")
                        .HasColumnType("int")
                        .HasColumnName("SystemRoleID");

                    b.Property<string>("SystemUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserLogin")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SystemUserId");

                    b.HasIndex("SystemRoleId");

                    b.ToTable("SystemUser", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxClearanceCertificate", b =>
                {
                    b.Property<long>("Tccid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TCCID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Tccid"));

                    b.Property<string>("CancelNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IncomeSource")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("TaxPayerDetails")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Tccdate")
                        .HasColumnType("datetime")
                        .HasColumnName("TCCDate");

                    b.Property<string>("Tccnumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TCCNumber");

                    b.HasKey("Tccid");

                    b.ToTable("TaxClearanceCertificate", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateTCCNumber");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxCredit", b =>
                {
                    b.Property<long>("TaxCreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TaxCreditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaxCreditId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("TaxCreditId");

                    b.ToTable("Tax_Credit", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxOffice", b =>
                {
                    b.Property<int>("TaxOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxOfficeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AddressTypeID");

                    b.Property<int?>("Approver1")
                        .HasColumnType("int");

                    b.Property<int?>("Approver2")
                        .HasColumnType("int");

                    b.Property<int?>("Approver3")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TaxOfficeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("TaxOfficeId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Tax_Offices", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxOffice1", b =>
                {
                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TaxOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxOfficeId"));

                    b.Property<string>("TaxOfficeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZoneCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("TaxOffice", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxPayerPayment", b =>
                {
                    b.Property<int>("Tppid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TPPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tppid"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionDescription")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("TransactionRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    b.HasKey("Tppid");

                    b.ToTable("TaxPayerPayment", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxPayerRole", b =>
                {
                    b.Property<int>("TaxPayerRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxPayerRoleId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsMultiLinkable")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TaxPayerRoleName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.HasKey("TaxPayerRoleId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("TaxPayerTypeId");

                    b.ToTable("TaxPayer_Roles", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxPayerType", b =>
                {
                    b.Property<int>("TaxPayerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxPayerTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TaxPayerTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("TaxPayerTypeId");

                    b.ToTable("TaxPayer_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TccRefHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ReceiptDate")
                        .HasColumnType("int");

                    b.Property<string>("ReciptRef")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ReqId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TccRefHolder", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TccRequest", b =>
                {
                    b.Property<long>("TccrequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TCCRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TccrequestId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GeneratedPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PdftemplateId")
                        .HasColumnType("int")
                        .HasColumnName("PDFTemplateID");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SealedPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("SedeDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("SEDE_DocumentID");

                    b.Property<long?>("SedeOrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("SEDE_OrderID");

                    b.Property<long?>("ServiceBillId")
                        .HasColumnType("bigint")
                        .HasColumnName("ServiceBillID");

                    b.Property<string>("SignedDigitalPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SignedVisiblePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.Property<string>("ValidatedPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("VisibleSignStatusId")
                        .HasColumnType("int")
                        .HasColumnName("VisibleSignStatusID");

                    b.HasKey("TccrequestId");

                    b.ToTable("TCC_Request", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateRequestRef");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Tccdetail", b =>
                {
                    b.Property<long>("TccdetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TCCDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TccdetailId"));

                    b.Property<decimal?>("AssessableIncome")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Erasassessed")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ERASAssessed");

                    b.Property<decimal?>("ErastaxPaid")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ERASTaxPaid");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("TcctaxPaid")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TCCTaxPaid");

                    b.HasKey("TccdetailId");

                    b.ToTable("TCCDetails", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TitleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TitleName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("TitleId");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Town", b =>
                {
                    b.Property<int>("TownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TownID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TownId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Lgaid")
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TownName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("TownId");

                    b.HasIndex("Lgaid");

                    b.ToTable("Town", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TreasuryReceipt", b =>
                {
                    b.Property<long>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ReceiptID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReceiptId"));

                    b.Property<long?>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssessmentID");

                    b.Property<string>("CancelNotes")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("CancelledBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GeneratedPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<decimal?>("ReceiptAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiptRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ServiceBillId")
                        .HasColumnType("bigint")
                        .HasColumnName("ServiceBillID");

                    b.Property<string>("SignImgSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SignSourceId")
                        .HasColumnType("int")
                        .HasColumnName("SignSourceID");

                    b.Property<string>("SignedPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("ReceiptId");

                    b.ToTable("Treasury_Receipt", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateReceiptRefNo");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.UnitFunction", b =>
                {
                    b.Property<int>("UnitFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitFunctionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitFunctionId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UnitFunctionName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("UnitPurposeId")
                        .HasColumnType("int")
                        .HasColumnName("UnitPurposeID");

                    b.HasKey("UnitFunctionId");

                    b.HasIndex("UnitPurposeId");

                    b.ToTable("Unit_Function", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.UnitOccupancy", b =>
                {
                    b.Property<int>("UnitOccupancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitOccupancyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitOccupancyId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UnitOccupancyName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("UnitOccupancyId");

                    b.ToTable("Unit_Occupancy", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.UnitPurpose", b =>
                {
                    b.Property<int>("UnitPurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitPurposeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitPurposeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UnitPurposeName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("UnitPurposeId");

                    b.ToTable("Unit_Purpose", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Upload", b =>
                {
                    b.Property<double?>("Aaiid")
                        .HasColumnType("float")
                        .HasColumnName("AAIID");

                    b.Property<double?>("Aarid")
                        .HasColumnType("float")
                        .HasColumnName("AARID");

                    b.Property<double?>("AssessmentId")
                        .HasColumnType("float")
                        .HasColumnName("AssessmentID");

                    b.Property<double?>("SNo")
                        .HasColumnType("float")
                        .HasColumnName("s/no");

                    b.Property<double?>("SettlementAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("SettlementId")
                        .HasColumnType("float")
                        .HasColumnName("SettlementID");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TaxBaseAmount")
                        .HasColumnType("float");

                    b.ToTable("upload", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AssetTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int")
                        .HasColumnName("DataSourceID");

                    b.Property<long?>("DsrefId")
                        .HasColumnType("bigint")
                        .HasColumnName("DSRefID");

                    b.Property<int?>("Lgaid")
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VehicleDescription")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("VehicleFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleFunctionID");

                    b.Property<int?>("VehicleOwnershipId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleOwnershipID");

                    b.Property<int?>("VehiclePurposeId")
                        .HasColumnType("int")
                        .HasColumnName("VehiclePurposeID");

                    b.Property<string>("VehicleRegNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("VehicleRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("VehicleRIN");

                    b.Property<int?>("VehicleSubTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleSubTypeID");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeID");

                    b.Property<string>("Vin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("VIN");

                    b.HasKey("VehicleId");

                    b.HasIndex("Lgaid");

                    b.HasIndex("VehicleFunctionId");

                    b.HasIndex("VehicleOwnershipId");

                    b.HasIndex("VehicleSubTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex(new[] { "AssetTypeId" }, "IDX_VA");

                    b.HasIndex(new[] { "VehiclePurposeId" }, "IDX_VH_VP");

                    b.ToTable("Vehicle", null, t =>
                        {
                            t.HasTrigger("TRG_GenerateVehicleRIN");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleFunction", b =>
                {
                    b.Property<int>("VehicleFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleFunctionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleFunctionId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VehicleFunctionName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("VehiclePurposeId")
                        .HasColumnType("int")
                        .HasColumnName("VehiclePurposeID");

                    b.HasKey("VehicleFunctionId");

                    b.HasIndex("VehiclePurposeId");

                    b.ToTable("Vehicle_Function", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleInsurance", b =>
                {
                    b.Property<int>("VehicleInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleInsuranceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleInsuranceId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("BrokerAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CoverTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CoverTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsuranceCertificateNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("InsuranceStatusId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceStatusID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("PremiumAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.Property<decimal?>("VerificationAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("VehicleInsuranceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Vehicle_Insurance", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleLicense", b =>
                {
                    b.Property<int>("VehicleLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleLicenseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleLicenseId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("LicenseStatusId")
                        .HasColumnType("int")
                        .HasColumnName("LicenseStatusID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.Property<int?>("VehicleInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleInsuranceID");

                    b.HasKey("VehicleLicenseId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleInsuranceId");

                    b.ToTable("Vehicle_Licenses", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleOwnership", b =>
                {
                    b.Property<int>("VehicleOwnershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleOwnershipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleOwnershipId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VehicleOwnershipName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("VehicleOwnershipId");

                    b.ToTable("Vehicle_Ownership", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehiclePurpose", b =>
                {
                    b.Property<int>("VehiclePurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehiclePurposeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehiclePurposeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VehiclePurposeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("VehiclePurposeId");

                    b.ToTable("Vehicle_Purpose", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleSubType", b =>
                {
                    b.Property<int>("VehicleSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleSubTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSubTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VehicleSubTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeID");

                    b.HasKey("VehicleSubTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle_SubTypes", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VehicleTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("Vehicle_Types", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwAssessmentBill", b =>
                {
                    b.Property<decimal?>("AssessmentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("AssessmentDate")
                        .HasColumnType("datetime");

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssessmentID");

                    b.Property<string>("AssessmentRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("SettlementDueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SettlementStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementStatusID");

                    b.Property<string>("SettlementStatusName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficerID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<string>("TaxPayerName")
                        .HasMaxLength(501)
                        .IsUnicode(false)
                        .HasColumnType("varchar(501)");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.ToTable((string)null);

                    b.ToView("vw_AssessmentBill", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwAssessmentRule", b =>
                {
                    b.Property<decimal?>("AssessmentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AssessmentRuleId")
                        .HasColumnType("int")
                        .HasColumnName("AssessmentRuleID");

                    b.Property<string>("AssessmentRuleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PaymentFrequencyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RuleRunName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_AssessmentRule", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwBillForPoAsettlement", b =>
                {
                    b.Property<decimal?>("BillAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("BillDate")
                        .HasColumnType("datetime");

                    b.Property<long>("BillId")
                        .HasColumnType("bigint")
                        .HasColumnName("BillID");

                    b.Property<string>("BillRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("BillTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BillTypeID");

                    b.Property<string>("BillTypeName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<int?>("SettlementStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementStatusID");

                    b.Property<string>("SettlementStatusName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TaxPayerName")
                        .HasMaxLength(501)
                        .IsUnicode(false)
                        .HasColumnType("varchar(501)");

                    b.ToTable((string)null);

                    b.ToView("vw_BillForPoASettlement", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwBuilding", b =>
                {
                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<string>("BuildingName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BuildingPurposeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BuildingRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("BuildingRIN");

                    b.Property<string>("StreetName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vw_Building", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwBusiness", b =>
                {
                    b.Property<string>("BusinessAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessID");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("BusinessRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("BusinessRIN");

                    b.Property<string>("BusinessSubSectorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vw_Business", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwCertificateList", b =>
                {
                    b.Property<long>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("CertificateID");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CertificateStatusName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CertificateTypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<string>("TaxPayerName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TaxPayerRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TaxPayerRIN");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("TaxPayerTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_CertificateList", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwCompany", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CompanyRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CompanyRIN");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<string>("Tin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TIN");

                    b.ToTable((string)null);

                    b.ToView("vw_Company", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwEmBankStatement", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("Bsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BSID");

                    b.Property<string>("Category")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RevenueHead")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_EM_BankStatement", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwEmPdMainAuthorized", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("Pdmaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDMAID");

                    b.Property<string>("Rin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RIN");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_EM_PD_Main_Authorized", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwEmPdMainPending", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("Pdmpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDMPID");

                    b.Property<string>("Rin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RIN");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_EM_PD_Main_Pending", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwEmPdMvaAuthorized", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("Pdmvaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDMVAID");

                    b.Property<string>("Rin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RIN");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_EM_PD_MVA_Authorized", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwEmPdMvaPending", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Bank")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentDateTime")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentRefNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("Pdmvpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PDMVPID");

                    b.Property<string>("Rin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RIN");

                    b.Property<int?>("TaxMonth")
                        .HasColumnType("int");

                    b.Property<string>("TaxPayerType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_EM_PD_MVA_Pending", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwGovernment", b =>
                {
                    b.Property<string>("ContactAddress")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("GovernmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GovernmentID");

                    b.Property<string>("GovernmentName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("GovernmentRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("GovernmentRIN");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<string>("Tin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TIN");

                    b.ToTable((string)null);

                    b.ToView("vw_Government", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwIndividual", b =>
                {
                    b.Property<string>("ContactAddress")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("IndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndividualID");

                    b.Property<string>("IndividualName")
                        .HasMaxLength(501)
                        .IsUnicode(false)
                        .HasColumnType("varchar(501)");

                    b.Property<string>("IndividualRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IndividualRIN");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<string>("Tin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TIN");

                    b.ToTable((string)null);

                    b.ToView("vw_Individual", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwLand", b =>
                {
                    b.Property<string>("LandFunctionName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("LandId")
                        .HasColumnType("int")
                        .HasColumnName("LandID");

                    b.Property<string>("LandOccupier")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LandRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LandRIN");

                    b.Property<string>("PlotNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vw_Land", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwMdaservice", b =>
                {
                    b.Property<int>("MdaserviceId")
                        .HasColumnType("int")
                        .HasColumnName("MDAServiceID");

                    b.Property<string>("MdaserviceName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MDAServiceName");

                    b.Property<string>("PaymentFrequencyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RuleRunName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("ServiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("TaxYear")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_MDAServices", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwNotification", b =>
                {
                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("NotificationID");

                    b.Property<string>("NotificationMethodName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NotificationRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NotificationTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxPayerRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TaxPayerRIN");

                    b.ToTable((string)null);

                    b.ToView("vw_Notifications", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwPaymentAccount", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("PaymentAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentAccountID");

                    b.Property<string>("PaymentDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("PaymentRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("RevenueStreamId")
                        .HasColumnType("int")
                        .HasColumnName("RevenueStreamID");

                    b.Property<int?>("SettlementMethodId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementMethodID");

                    b.Property<string>("SettlementMethodName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficerID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<string>("TaxPayerName")
                        .HasMaxLength(501)
                        .IsUnicode(false)
                        .HasColumnType("varchar(501)");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.Property<string>("TransactionRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.ToTable((string)null);

                    b.ToView("vw_PaymentAccount", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwPaymentAccountOperation", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FromName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FromTaxPayer")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OperationTypesName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Operation_TypesName");

                    b.Property<int>("Poaid")
                        .HasColumnType("int")
                        .HasColumnName("POAID");

                    b.Property<string>("ToName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ToTaxPayer")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vw_PaymentAccountOperation", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwProfilePayePcMe", b =>
                {
                    b.Property<string>("ProfileDescription")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("ProfileReferenceNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TaxPayerCount")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_Profile_PAYE_PC_ME", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwProfilePayePcMeAsset", b =>
                {
                    b.Property<string>("AssetName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("AssetRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("AssetRIN");

                    b.Property<string>("AssetTypeName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.ToTable((string)null);

                    b.ToView("vw_Profile_PAYE_PC_ME_Asset", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwProfilePayePcMeTaxPayer", b =>
                {
                    b.Property<string>("ContactAddress")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TaxPayerName")
                        .HasMaxLength(501)
                        .IsUnicode(false)
                        .HasColumnType("varchar(501)");

                    b.Property<string>("TaxPayerRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TaxPayerRIN");

                    b.Property<string>("TaxPayerTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vw_Profile_PAYE_PC_ME_TaxPayer", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwServiceBillNew", b =>
                {
                    b.Property<decimal?>("ServiceBillAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ServiceBillDate")
                        .HasColumnType("datetime");

                    b.Property<long>("ServiceBillId")
                        .HasColumnType("bigint")
                        .HasColumnName("ServiceBillID");

                    b.Property<string>("ServiceBillRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("SettlementDueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SettlementStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementStatusID");

                    b.Property<string>("SettlementStatusName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<int?>("TaxOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficerID");

                    b.Property<int?>("TaxPayerId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerID");

                    b.Property<string>("TaxPayerName")
                        .HasMaxLength(501)
                        .IsUnicode(false)
                        .HasColumnType("varchar(501)");

                    b.Property<int?>("TaxPayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxPayerTypeID");

                    b.ToTable((string)null);

                    b.ToView("vw_ServiceBillNew", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwSpecial", b =>
                {
                    b.Property<string>("ContactName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpecialID");

                    b.Property<string>("SpecialRin")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SpecialRIN");

                    b.Property<string>("SpecialTaxPayerName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("TaxOfficeId")
                        .HasColumnType("int")
                        .HasColumnName("TaxOfficeID");

                    b.Property<string>("Tin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TIN");

                    b.ToTable((string)null);

                    b.ToView("vw_Special", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwTccrequestList", b =>
                {
                    b.Property<string>("MobileNumber1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ServiceBillRefNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SettlementStatusName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TaxPayerName")
                        .IsRequired()
                        .HasMaxLength(501)
                        .IsUnicode(false)
                        .HasColumnType("varchar(501)");

                    b.Property<long>("TccrequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("TCCRequestID");

                    b.ToTable((string)null);

                    b.ToView("vw_TCCRequestList", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VwVehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.Property<string>("VehiclePurposeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("VehicleRegNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("VehicleRin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("VehicleRIN");

                    b.Property<string>("VehicleSubTypeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vw_Vehicle", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Lgaid")
                        .HasColumnType("int")
                        .HasColumnName("LGAID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WardName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("WardId");

                    b.HasIndex("Lgaid");

                    b.ToTable("Ward", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Zone", b =>
                {
                    b.Property<string>("ZoneCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LgaId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedBY");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<string>("ZoneName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ZoneCode");

                    b.ToTable("Zone", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ZoneLga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LgaName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZoneCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ZoneLGA", (string)null);
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Agency", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AgencyType", "AgencyType")
                        .WithMany("Agencies")
                        .HasForeignKey("AgencyTypeId")
                        .HasConstraintName("FK_Agencies_Agency_Types");

                    b.Navigation("AgencyType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentGroup", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("AssessmentGroups")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Assessment_Group_Asset_Types");

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentItem", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Agency", "Agency")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_Assessment_Items_Agencies");

                    b.HasOne("SelfPortalAPi.Model.AssessmentGroup", "AssessmentGroup")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AssessmentGroupId")
                        .HasConstraintName("FK_Assessment_Items_Assessment_Group");

                    b.HasOne("SelfPortalAPi.Model.AssessmentItemCategory", "AssessmentItemCategory")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AssessmentItemCategoryId")
                        .HasConstraintName("FK_Assessment_Items_Assessment_Item_Category");

                    b.HasOne("SelfPortalAPi.Model.AssessmentItemSubCategory", "AssessmentItemSubCategory")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AssessmentItemSubCategoryId")
                        .HasConstraintName("FK_Assessment_Items_Assessment_Item_SubCategory");

                    b.HasOne("SelfPortalAPi.Model.AssessmentSubGroup", "AssessmentSubGroup")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AssessmentSubGroupId")
                        .HasConstraintName("FK_Assessment_Items_Assessment_SubGroup");

                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Assessment_Items_Asset_Types");

                    b.HasOne("SelfPortalAPi.Model.MstComputation", "Computation")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("ComputationId")
                        .HasConstraintName("FK_Assessment_Items_MST_Computation");

                    b.HasOne("SelfPortalAPi.Model.RevenueStream", "RevenueStream")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("RevenueStreamId")
                        .HasConstraintName("FK_Assessment_Items_Revenue_Stream");

                    b.HasOne("SelfPortalAPi.Model.RevenueSubStream", "RevenueSubStream")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("RevenueSubStreamId")
                        .HasConstraintName("FK_Assessment_Items_Revenue_SubStream");

                    b.Navigation("Agency");

                    b.Navigation("AssessmentGroup");

                    b.Navigation("AssessmentItemCategory");

                    b.Navigation("AssessmentItemSubCategory");

                    b.Navigation("AssessmentSubGroup");

                    b.Navigation("AssetType");

                    b.Navigation("Computation");

                    b.Navigation("RevenueStream");

                    b.Navigation("RevenueSubStream");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentItemSubCategory", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssessmentItemCategory", "AssessmentItemCategory")
                        .WithMany("AssessmentItemSubCategories")
                        .HasForeignKey("AssessmentItemCategoryId")
                        .HasConstraintName("FK_Assessment_Item_SubCategory_Assessment_Item_Category");

                    b.Navigation("AssessmentItemCategory");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentRule", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.PaymentFrequency", "PaymentFrequency")
                        .WithMany("AssessmentRules")
                        .HasForeignKey("PaymentFrequencyId")
                        .HasConstraintName("FK_Assessment_Rules_Payment_Frequency");

                    b.HasOne("SelfPortalAPi.Model.PaymentOption", "PaymentOption")
                        .WithMany("AssessmentRules")
                        .HasForeignKey("PaymentOptionId")
                        .HasConstraintName("FK_Assessment_Rules_Payment_Options");

                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("AssessmentRules")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_Assessment_Rules_Profiles");

                    b.HasOne("SelfPortalAPi.Model.MstRuleRun", "RuleRun")
                        .WithMany("AssessmentRules")
                        .HasForeignKey("RuleRunId")
                        .HasConstraintName("FK_Assessment_Rules_MST_RuleRun");

                    b.Navigation("PaymentFrequency");

                    b.Navigation("PaymentOption");

                    b.Navigation("Profile");

                    b.Navigation("RuleRun");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentSubGroup", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssessmentGroup", "AssessmentGroup")
                        .WithMany("AssessmentSubGroups")
                        .HasForeignKey("AssessmentGroupId")
                        .HasConstraintName("FK_Assessment_SubGroup_Assessment_Group");

                    b.Navigation("AssessmentGroup");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AuditLog", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AlScreen", "Asl")
                        .WithMany("AuditLogs")
                        .HasForeignKey("Aslid")
                        .HasConstraintName("FK_Audit_Log_AL_Screen");

                    b.Navigation("Asl");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Building", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("Buildings")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Building_Asset_Types");

                    b.HasOne("SelfPortalAPi.Model.BuildingCompletion", "BuildingCompletion")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingCompletionId")
                        .HasConstraintName("FK_Building_Building_Completion");

                    b.HasOne("SelfPortalAPi.Model.BuildingOwnership", "BuildingOwnership")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingOwnershipId")
                        .HasConstraintName("FK_Building_Building_Ownership");

                    b.HasOne("SelfPortalAPi.Model.BuildingPurpose", "BuildingPurpose")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingPurposeId")
                        .HasConstraintName("FK_Building_Building_Purpose");

                    b.HasOne("SelfPortalAPi.Model.BuildingType", "BuildingType")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingTypeId")
                        .HasConstraintName("FK_Building_Building_Types");

                    b.HasOne("SelfPortalAPi.Model.Lga", "Lga")
                        .WithMany("Buildings")
                        .HasForeignKey("Lgaid")
                        .HasConstraintName("FK_Building_LGA");

                    b.HasOne("SelfPortalAPi.Model.Town", "Town")
                        .WithMany("Buildings")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_Building_Town");

                    b.HasOne("SelfPortalAPi.Model.Ward", "Ward")
                        .WithMany("Buildings")
                        .HasForeignKey("WardId")
                        .HasConstraintName("FK_Building_Ward");

                    b.Navigation("AssetType");

                    b.Navigation("BuildingCompletion");

                    b.Navigation("BuildingOwnership");

                    b.Navigation("BuildingPurpose");

                    b.Navigation("BuildingType");

                    b.Navigation("Lga");

                    b.Navigation("Town");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingUnit", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Size", "Size")
                        .WithMany("BuildingUnits")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_Building_Unit_Sizes");

                    b.HasOne("SelfPortalAPi.Model.UnitFunction", "UnitFunction")
                        .WithMany("BuildingUnits")
                        .HasForeignKey("UnitFunctionId")
                        .HasConstraintName("FK_Building_Unit_Unit_Function");

                    b.HasOne("SelfPortalAPi.Model.UnitOccupancy", "UnitOccupancy")
                        .WithMany("BuildingUnits")
                        .HasForeignKey("UnitOccupancyId")
                        .HasConstraintName("FK_Building_Unit_Unit_Occupancy");

                    b.HasOne("SelfPortalAPi.Model.UnitPurpose", "UnitPurpose")
                        .WithMany("BuildingUnits")
                        .HasForeignKey("UnitPurposeId")
                        .HasConstraintName("FK_Building_Unit_Unit_Purpose");

                    b.Navigation("Size");

                    b.Navigation("UnitFunction");

                    b.Navigation("UnitOccupancy");

                    b.Navigation("UnitPurpose");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Business", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("Businesses")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Business_Asset_Types");

                    b.HasOne("SelfPortalAPi.Model.BusinessCategory", "BusinessCategory")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessCategoryId")
                        .HasConstraintName("FK_Business_Business_Category");

                    b.HasOne("SelfPortalAPi.Model.BusinessOperation", "BusinessOperation")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessOperationId")
                        .HasConstraintName("FK_Business_Business_Operation");

                    b.HasOne("SelfPortalAPi.Model.BusinessSector", "BusinessSector")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessSectorId")
                        .HasConstraintName("FK_Business_Business_Sector");

                    b.HasOne("SelfPortalAPi.Model.BusinessStructure", "BusinessStructure")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessStructureId")
                        .HasConstraintName("FK_Business_Business_Structure");

                    b.HasOne("SelfPortalAPi.Model.BusinessSubSector", "BusinessSubSector")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessSubSectorId")
                        .HasConstraintName("FK_Business_Business_SubSector");

                    b.HasOne("SelfPortalAPi.Model.BusinessType", "BusinessType")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("FK_Business_Business_Types");

                    b.HasOne("SelfPortalAPi.Model.Lga", "Lga")
                        .WithMany("Businesses")
                        .HasForeignKey("Lgaid")
                        .HasConstraintName("FK_Business_LGA");

                    b.HasOne("SelfPortalAPi.Model.Size", "Size")
                        .WithMany("Businesses")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_Business_Sizes");

                    b.Navigation("AssetType");

                    b.Navigation("BusinessCategory");

                    b.Navigation("BusinessOperation");

                    b.Navigation("BusinessSector");

                    b.Navigation("BusinessStructure");

                    b.Navigation("BusinessSubSector");

                    b.Navigation("BusinessType");

                    b.Navigation("Lga");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessCategory", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.BusinessType", "BusinessType")
                        .WithMany("BusinessCategories")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("FK_Business_Category_Business_Types");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessOperation", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.BusinessType", "BusinessType")
                        .WithMany("BusinessOperations")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("FK_Business_Operation_Business_Types");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessSector", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.BusinessCategory", "BusinessCategory")
                        .WithMany("BusinessSectors")
                        .HasForeignKey("BusinessCategoryId")
                        .HasConstraintName("FK_Business_Sector_Business_Category");

                    b.HasOne("SelfPortalAPi.Model.BusinessType", "BusinessType")
                        .WithMany("BusinessSectors")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("FK_Business_Sector_Business_Types");

                    b.Navigation("BusinessCategory");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessStructure", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.BusinessType", "BusinessType")
                        .WithMany("BusinessStructures")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("FK_Business_Structure_Business_Types");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessSubSector", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.BusinessSector", "BusinessSector")
                        .WithMany("BusinessSubSectors")
                        .HasForeignKey("BusinessSectorId")
                        .HasConstraintName("FK_Business_SubSector_Business_Sector");

                    b.Navigation("BusinessSector");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Certificate", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.CertificateType", "CertificateType")
                        .WithMany("Certificates")
                        .HasForeignKey("CertificateTypeId")
                        .HasConstraintName("FK_Certificates_Certificate_Types");

                    b.Navigation("CertificateType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Company", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.EconomicActivity", "EconomicActivities")
                        .WithMany("Companies")
                        .HasForeignKey("EconomicActivitiesId")
                        .HasConstraintName("FK_Company_Economic_Activities");

                    b.HasOne("SelfPortalAPi.Model.NotificationMethod", "NotificationMethod")
                        .WithMany("Companies")
                        .HasForeignKey("NotificationMethodId")
                        .HasConstraintName("FK_Company_Notification_Method");

                    b.HasOne("SelfPortalAPi.Model.MstRegisterationStatus", "RegisterationStatus")
                        .WithMany("Companies")
                        .HasForeignKey("RegisterationStatusId")
                        .HasConstraintName("FK_Company_MST_RegisterationStatus");

                    b.HasOne("SelfPortalAPi.Model.TaxOffice", "TaxOffice")
                        .WithMany("Companies")
                        .HasForeignKey("TaxOfficeId")
                        .HasConstraintName("FK_Company_Tax_Offices");

                    b.HasOne("SelfPortalAPi.Model.TaxPayerType", "TaxPayerType")
                        .WithMany("Companies")
                        .HasForeignKey("TaxPayerTypeId")
                        .HasConstraintName("FK_Company_TaxPayer_Types");

                    b.Navigation("EconomicActivities");

                    b.Navigation("NotificationMethod");

                    b.Navigation("RegisterationStatus");

                    b.Navigation("TaxOffice");

                    b.Navigation("TaxPayerType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EconomicActivity", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TaxPayerType", "TaxPayerType")
                        .WithMany("EconomicActivities")
                        .HasForeignKey("TaxPayerTypeId")
                        .HasConstraintName("FK_Economic_Activities_TaxPayer_Types");

                    b.Navigation("TaxPayerType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmRevenueHead", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.EmCategory", "Category")
                        .WithMany("EmRevenueHeads")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_EM_RevenueHead_EM_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Government", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.GovernmentType", "GovernmentType")
                        .WithMany("Governments")
                        .HasForeignKey("GovernmentTypeId")
                        .HasConstraintName("FK_Government_Government_Types");

                    b.HasOne("SelfPortalAPi.Model.NotificationMethod", "NotificationMethod")
                        .WithMany("Governments")
                        .HasForeignKey("NotificationMethodId")
                        .HasConstraintName("FK_Government_Notification_Method");

                    b.HasOne("SelfPortalAPi.Model.MstRegisterationStatus", "RegisterationStatus")
                        .WithMany("Governments")
                        .HasForeignKey("RegisterationStatusId")
                        .HasConstraintName("FK_Government_MST_RegisterationStatus");

                    b.HasOne("SelfPortalAPi.Model.TaxOffice", "TaxOffice")
                        .WithMany("Governments")
                        .HasForeignKey("TaxOfficeId")
                        .HasConstraintName("FK_Government_Tax_Offices");

                    b.HasOne("SelfPortalAPi.Model.TaxPayerType", "TaxPayerType")
                        .WithMany("Governments")
                        .HasForeignKey("TaxPayerTypeId")
                        .HasConstraintName("FK_Government_TaxPayer_Types");

                    b.Navigation("GovernmentType");

                    b.Navigation("NotificationMethod");

                    b.Navigation("RegisterationStatus");

                    b.Navigation("TaxOffice");

                    b.Navigation("TaxPayerType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Individual", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.EconomicActivity", "EconomicActivities")
                        .WithMany("Individuals")
                        .HasForeignKey("EconomicActivitiesId")
                        .HasConstraintName("FK_Individual_Economic_Activities");

                    b.HasOne("SelfPortalAPi.Model.Gender", "Gender")
                        .WithMany("Individuals")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Individual_Gender");

                    b.HasOne("SelfPortalAPi.Model.MaritalStatus", "MaritalStatus")
                        .WithMany("Individuals")
                        .HasForeignKey("MaritalStatusId")
                        .HasConstraintName("FK_Individual_MaritalStatus");

                    b.HasOne("SelfPortalAPi.Model.Nationality", "Nationality")
                        .WithMany("Individuals")
                        .HasForeignKey("NationalityId")
                        .HasConstraintName("FK_Individual_Nationality");

                    b.HasOne("SelfPortalAPi.Model.NotificationMethod", "NotificationMethod")
                        .WithMany("Individuals")
                        .HasForeignKey("NotificationMethodId")
                        .HasConstraintName("FK_Individual_Notification_Method");

                    b.HasOne("SelfPortalAPi.Model.MstRegisterationStatus", "RegisterationStatus")
                        .WithMany("Individuals")
                        .HasForeignKey("RegisterationStatusId")
                        .HasConstraintName("FK_Individual_MST_RegisterationStatus");

                    b.HasOne("SelfPortalAPi.Model.TaxOffice", "TaxOffice")
                        .WithMany("Individuals")
                        .HasForeignKey("TaxOfficeId")
                        .HasConstraintName("FK_Individual_Tax_Offices");

                    b.HasOne("SelfPortalAPi.Model.TaxPayerType", "TaxPayerType")
                        .WithMany("Individuals")
                        .HasForeignKey("TaxPayerTypeId")
                        .HasConstraintName("FK_Individual_TaxPayer_Types");

                    b.HasOne("SelfPortalAPi.Model.Title", "Title")
                        .WithMany("Individuals")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_Individual_Titles");

                    b.Navigation("EconomicActivities");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");

                    b.Navigation("Nationality");

                    b.Navigation("NotificationMethod");

                    b.Navigation("RegisterationStatus");

                    b.Navigation("TaxOffice");

                    b.Navigation("TaxPayerType");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Land", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("Lands")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Land_Asset_Types");

                    b.HasOne("SelfPortalAPi.Model.LandDevelopment", "LandDevelopment")
                        .WithMany("Lands")
                        .HasForeignKey("LandDevelopmentId")
                        .HasConstraintName("FK_Land_Land_Development");

                    b.HasOne("SelfPortalAPi.Model.LandFunction", "LandFunction")
                        .WithMany("Lands")
                        .HasForeignKey("LandFunctionId")
                        .HasConstraintName("FK_Land_Land_Function");

                    b.HasOne("SelfPortalAPi.Model.LandOwnership", "LandOwnership")
                        .WithMany("Lands")
                        .HasForeignKey("LandOwnershipId")
                        .HasConstraintName("FK_Land_Land_Ownership");

                    b.HasOne("SelfPortalAPi.Model.LandPurpose", "LandPurpose")
                        .WithMany("Lands")
                        .HasForeignKey("LandPurposeId")
                        .HasConstraintName("FK_Land_Land_Purpose");

                    b.HasOne("SelfPortalAPi.Model.LandStreetCondition", "LandStreetCondition")
                        .WithMany("Lands")
                        .HasForeignKey("LandStreetConditionId")
                        .HasConstraintName("FK_Land_Land_StreetCondition");

                    b.HasOne("SelfPortalAPi.Model.Lga", "Lga")
                        .WithMany("Lands")
                        .HasForeignKey("Lgaid")
                        .HasConstraintName("FK_Land_LGA");

                    b.HasOne("SelfPortalAPi.Model.Town", "Town")
                        .WithMany("Lands")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_Land_Town");

                    b.HasOne("SelfPortalAPi.Model.Ward", "Ward")
                        .WithMany("Lands")
                        .HasForeignKey("WardId")
                        .HasConstraintName("FK_Land_Ward");

                    b.Navigation("AssetType");

                    b.Navigation("LandDevelopment");

                    b.Navigation("LandFunction");

                    b.Navigation("LandOwnership");

                    b.Navigation("LandPurpose");

                    b.Navigation("LandStreetCondition");

                    b.Navigation("Lga");

                    b.Navigation("Town");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandFunction", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.LandPurpose", "LandPurpose")
                        .WithMany("LandFunctions")
                        .HasForeignKey("LandPurposeId")
                        .HasConstraintName("FK_Land_Function_Land_Purpose");

                    b.Navigation("LandPurpose");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Lga", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Lgaclass", "Lgaclass")
                        .WithMany("Lgas")
                        .HasForeignKey("LgaclassId")
                        .HasConstraintName("FK_LGA_LGAClass");

                    b.Navigation("Lgaclass");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentAdjustment", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapAssessmentAssessmentItem", "Aai")
                        .WithMany("MapAssessmentAdjustments")
                        .HasForeignKey("Aaiid")
                        .HasConstraintName("FK_MAP_Assessment_Adjustment_MAP_Assessment_AssessmentItem");

                    b.Navigation("Aai");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentAssessmentItem", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapAssessmentAssessmentRule", "Aar")
                        .WithMany("MapAssessmentAssessmentItems")
                        .HasForeignKey("Aarid")
                        .HasConstraintName("FK_MAP_Assessment_AssessmentItem_MAP_Assessment_AssessmentRule");

                    b.HasOne("SelfPortalAPi.Model.AssessmentItem", "AssessmentItem")
                        .WithMany("MapAssessmentAssessmentItems")
                        .HasForeignKey("AssessmentItemId")
                        .HasConstraintName("FK_MAP_Assessment_AssessmentItem_Assessment_Items");

                    b.HasOne("SelfPortalAPi.Model.MstPaymentStatus", "PaymentStatus")
                        .WithMany("MapAssessmentAssessmentItems")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("FK_MAP_Assessment_AssessmentItem_MST_PaymentStatus");

                    b.Navigation("Aar");

                    b.Navigation("AssessmentItem");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentAssessmentRule", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Assessment", "Assessment")
                        .WithMany("MapAssessmentAssessmentRules")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_MAP_Assessment_AssessmentRule_Assessment");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentRuleAssessmentItem", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssessmentItem", "AssessmentItem")
                        .WithMany("MapAssessmentRuleAssessmentItems")
                        .HasForeignKey("AssessmentItemId")
                        .HasConstraintName("FK_MAP_AssessmentRule_AssessmentItem_Assessment_Items");

                    b.HasOne("SelfPortalAPi.Model.AssessmentRule", "AssessmentRule")
                        .WithMany("MapAssessmentRuleAssessmentItems")
                        .HasForeignKey("AssessmentRuleId")
                        .HasConstraintName("FK_MAP_AssessmentRule_AssessmentItem_Assessment_Rules");

                    b.Navigation("AssessmentItem");

                    b.Navigation("AssessmentRule");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentRuleSettlementMethod", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssessmentRule", "AssessmentRule")
                        .WithMany("MapAssessmentRuleSettlementMethods")
                        .HasForeignKey("AssessmentRuleId")
                        .HasConstraintName("FK_MAP_AssessmentRule_SettlementMethod_Assessment_Rules");

                    b.HasOne("SelfPortalAPi.Model.SettlementMethod", "SettlementMethod")
                        .WithMany("MapAssessmentRuleSettlementMethods")
                        .HasForeignKey("SettlementMethodId")
                        .HasConstraintName("FK_MAP_AssessmentRule_SettlementMethod_Settlement_Method");

                    b.Navigation("AssessmentRule");

                    b.Navigation("SettlementMethod");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapBuildingBuildingUnit", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Building", "Building")
                        .WithMany("MapBuildingBuildingUnits")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_MAP_Building_BuildingUnit_Building");

                    b.HasOne("SelfPortalAPi.Model.BuildingUnit", "BuildingUnit")
                        .WithMany("MapBuildingBuildingUnits")
                        .HasForeignKey("BuildingUnitId")
                        .HasConstraintName("FK_MAP_Building_BuildingUnit_Building_Unit");

                    b.Navigation("Building");

                    b.Navigation("BuildingUnit");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapBuildingLand", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Building", "Building")
                        .WithMany("MapBuildingLands")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_MAP_Building_Land_Building");

                    b.HasOne("SelfPortalAPi.Model.Land", "Land")
                        .WithMany("MapBuildingLands")
                        .HasForeignKey("LandId")
                        .HasConstraintName("FK_MAP_Building_Land_Land");

                    b.Navigation("Building");

                    b.Navigation("Land");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapBusinessBuilding", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Building", "Building")
                        .WithMany("MapBusinessBuildings")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_MAP_Business_Building_Building");

                    b.HasOne("SelfPortalAPi.Model.Business", "Business")
                        .WithMany("MapBusinessBuildings")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_MAP_Business_Building_Business");

                    b.Navigation("Building");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateCustomField", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Certificate", "Certificate")
                        .WithMany("MapCertificateCustomFields")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_MAP_Certificate_CustomField_Certificates");

                    b.HasOne("SelfPortalAPi.Model.MapCertificateTypeField", "Ctf")
                        .WithMany("MapCertificateCustomFields")
                        .HasForeignKey("Ctfid")
                        .HasConstraintName("FK_MAP_Certificate_CustomField_MAP_CertificateType_Field");

                    b.Navigation("Certificate");

                    b.Navigation("Ctf");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateGenerate", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Certificate", "Certificate")
                        .WithMany("MapCertificateGenerates")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_MAP_Certificate_Generate_Certificates");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateGenerateField", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapCertificateGenerate", "Cg")
                        .WithMany("MapCertificateGenerateFields")
                        .HasForeignKey("Cgid")
                        .HasConstraintName("FK_MAP_Certificate_Generate_Field_MAP_Certificate_Generate");

                    b.Navigation("Cg");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateIssue", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Certificate", "Certificate")
                        .WithMany("MapCertificateIssues")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_MAP_Certificate_Issue_Certificates");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateRevoke", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Certificate", "Certificate")
                        .WithMany("MapCertificateRevokes")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_MAP_Certificate_Revoke_Certificates");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateSeal", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Certificate", "Certificate")
                        .WithMany("MapCertificateSeals")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_MAP_Certificate_Seal_Certificates");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateSignDigital", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Certificate", "Certificate")
                        .WithMany("MapCertificateSignDigitals")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_MAP_Certificate_SignDigital_Certificates");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateStage", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Certificate", "Certificate")
                        .WithMany("MapCertificateStages")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_MAP_Certificate_Stages_Certificates");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateTypeField", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.CertificateType", "CertificateType")
                        .WithMany("MapCertificateTypeFields")
                        .HasForeignKey("CertificateTypeId")
                        .HasConstraintName("FK_MAP_CertificateType_Field_Certificate_Types");

                    b.HasOne("SelfPortalAPi.Model.MstFieldType", "FieldType")
                        .WithMany("MapCertificateTypeFields")
                        .HasForeignKey("FieldTypeId")
                        .HasConstraintName("FK_MAP_CertificateType_Field_MST_FieldType");

                    b.Navigation("CertificateType");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateValidate", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Certificate", "Certificate")
                        .WithMany("MapCertificateValidates")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("FK_MAP_Certificate_Validate_Certificates");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCompanyAddressInformation", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AddressType", "AddressType")
                        .WithMany("MapCompanyAddressInformations")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_MAP_Company_AddressInformation_Address_Types");

                    b.HasOne("SelfPortalAPi.Model.Building", "Building")
                        .WithMany("MapCompanyAddressInformations")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_MAP_Company_AddressInformation_Building");

                    b.HasOne("SelfPortalAPi.Model.Company", "Company")
                        .WithMany("MapCompanyAddressInformations")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_MAP_Company_AddressInformation_Company");

                    b.Navigation("AddressType");

                    b.Navigation("Building");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapDirectoratesRevenueStream", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Directorate", "Directorate")
                        .WithMany("MapDirectoratesRevenueStreams")
                        .HasForeignKey("DirectorateId")
                        .HasConstraintName("FK_MAP_Directorates_RevenueStream_Directorates");

                    b.HasOne("SelfPortalAPi.Model.RevenueStream", "RevenueStream")
                        .WithMany("MapDirectoratesRevenueStreams")
                        .HasForeignKey("RevenueStreamId")
                        .HasConstraintName("FK_MAP_Directorates_RevenueStream_Revenue_Stream");

                    b.Navigation("Directorate");

                    b.Navigation("RevenueStream");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapGovernmentAddressInformation", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AddressType", "AddressType")
                        .WithMany("MapGovernmentAddressInformations")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_MAP_Government_AddressInformation_Address_Types");

                    b.HasOne("SelfPortalAPi.Model.Building", "Building")
                        .WithMany("MapGovernmentAddressInformations")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_MAP_Government_AddressInformation_Building");

                    b.HasOne("SelfPortalAPi.Model.Government", "Government")
                        .WithMany("MapGovernmentAddressInformations")
                        .HasForeignKey("GovernmentId")
                        .HasConstraintName("FK_MAP_Government_AddressInformation_Government");

                    b.Navigation("AddressType");

                    b.Navigation("Building");

                    b.Navigation("Government");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapIndividualAddressInformation", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AddressType", "AddressType")
                        .WithMany("MapIndividualAddressInformations")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_MAP_Individual_AddressInformation_Address_Types");

                    b.HasOne("SelfPortalAPi.Model.Building", "Building")
                        .WithMany("MapIndividualAddressInformations")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_MAP_Individual_AddressInformation_Building");

                    b.HasOne("SelfPortalAPi.Model.Individual", "Individual")
                        .WithMany("MapIndividualAddressInformations")
                        .HasForeignKey("IndividualId")
                        .HasConstraintName("FK_MAP_Individual_AddressInformation_Individual");

                    b.Navigation("AddressType");

                    b.Navigation("Building");

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapMdaserviceMdaserviceItem", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MdaService", "Mdaservice")
                        .WithMany("MapMdaserviceMdaserviceItems")
                        .HasForeignKey("MdaserviceId")
                        .HasConstraintName("FK_MAP_MDAService_MDAServiceItem_MDA_Services");

                    b.HasOne("SelfPortalAPi.Model.MdaServiceItem", "MdaserviceItem")
                        .WithMany("MapMdaserviceMdaserviceItems")
                        .HasForeignKey("MdaserviceItemId")
                        .HasConstraintName("FK_MAP_MDAService_MDAServiceItem_MDAService_Items");

                    b.Navigation("Mdaservice");

                    b.Navigation("MdaserviceItem");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapMdaserviceSettlementMethod", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MdaService", "Mdaservice")
                        .WithMany("MapMdaserviceSettlementMethods")
                        .HasForeignKey("MdaserviceId")
                        .HasConstraintName("FK_MAP_MDAService_SettlementMethod_MDA_Services");

                    b.HasOne("SelfPortalAPi.Model.SettlementMethod", "SettlementMethod")
                        .WithMany("MapMdaserviceSettlementMethods")
                        .HasForeignKey("SettlementMethodId")
                        .HasConstraintName("FK_MAP_MDAService_SettlementMethod_Settlement_Method");

                    b.Navigation("Mdaservice");

                    b.Navigation("SettlementMethod");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillAdjustment", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapServiceBillMdaserviceItem", "Sbsi")
                        .WithMany("MapServiceBillAdjustments")
                        .HasForeignKey("Sbsiid")
                        .HasConstraintName("FK_MAP_ServiceBill_Adjustment_MAP_ServiceBill_MDAServiceItem");

                    b.Navigation("Sbsi");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillLateCharge", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapServiceBillMdaserviceItem", "Sbsi")
                        .WithMany("MapServiceBillLateCharges")
                        .HasForeignKey("Sbsiid")
                        .HasConstraintName("FK_MAP_ServiceBill_LateCharge_MAP_ServiceBill_MDAServiceItem");

                    b.Navigation("Sbsi");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillMdaservice", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MdaService", "Mdaservice")
                        .WithMany("MapServiceBillMdaservices")
                        .HasForeignKey("MdaserviceId")
                        .HasConstraintName("FK_MAP_ServiceBill_MDAService_MDA_Services");

                    b.HasOne("SelfPortalAPi.Model.ServiceBill", "ServiceBill")
                        .WithMany("MapServiceBillMdaservices")
                        .HasForeignKey("ServiceBillId")
                        .HasConstraintName("FK_MAP_ServiceBill_MDAService_ServiceBill");

                    b.Navigation("Mdaservice");

                    b.Navigation("ServiceBill");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillMdaserviceItem", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MdaServiceItem", "MdaserviceItem")
                        .WithMany("MapServiceBillMdaserviceItems")
                        .HasForeignKey("MdaserviceItemId")
                        .HasConstraintName("FK_MAP_ServiceBill_MDAServiceItem_MDA_Service_Items");

                    b.HasOne("SelfPortalAPi.Model.MapServiceBillMdaservice", "Sbs")
                        .WithMany("MapServiceBillMdaserviceItems")
                        .HasForeignKey("Sbsid")
                        .HasConstraintName("FK_MAP_ServiceBill_MDAServiceItem_MAP_ServiceBill_MDAService");

                    b.Navigation("MdaserviceItem");

                    b.Navigation("Sbs");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapSettlementSettlementItem", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapAssessmentAssessmentItem", "Aai")
                        .WithMany("MapSettlementSettlementItems")
                        .HasForeignKey("Aaiid")
                        .HasConstraintName("FK_MAP_Settlement_SettlementItem_MAP_Assessment_AssessmentItem");

                    b.HasOne("SelfPortalAPi.Model.MapServiceBillMdaserviceItem", "Sbsi")
                        .WithMany("MapSettlementSettlementItems")
                        .HasForeignKey("Sbsiid")
                        .HasConstraintName("FK_MAP_Settlement_SettlementItem_MAP_ServiceBill_MDAServiceItem");

                    b.HasOne("SelfPortalAPi.Model.Settlement", "Settlement")
                        .WithMany("MapSettlementSettlementItems")
                        .HasForeignKey("SettlementId")
                        .HasConstraintName("FK_MAP_Settlement_SettlementItem_Settlement");

                    b.Navigation("Aai");

                    b.Navigation("Sbsi");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapSpecialAddressInformation", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AddressType", "AddressType")
                        .WithMany("MapSpecialAddressInformations")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_MAP_Special_AddressInformation_Address_Types");

                    b.HasOne("SelfPortalAPi.Model.Building", "Building")
                        .WithMany("MapSpecialAddressInformations")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_MAP_Special_AddressInformation_Building");

                    b.HasOne("SelfPortalAPi.Model.Special", "Special")
                        .WithMany("MapSpecialAddressInformations")
                        .HasForeignKey("SpecialId")
                        .HasConstraintName("FK_MAP_Special_AddressInformation_Special");

                    b.Navigation("AddressType");

                    b.Navigation("Building");

                    b.Navigation("Special");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxOfficeTarget", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.RevenueStream", "RevenueStream")
                        .WithMany("MapTaxOfficeTargets")
                        .HasForeignKey("RevenueStreamId")
                        .HasConstraintName("FK_MAP_TaxOffice_Target_Revenue_Stream");

                    b.HasOne("SelfPortalAPi.Model.TaxOffice", "TaxOffice")
                        .WithMany("MapTaxOfficeTargets")
                        .HasForeignKey("TaxOfficeId")
                        .HasConstraintName("FK_MAP_TaxOffice_Target_Tax_Offices");

                    b.Navigation("RevenueStream");

                    b.Navigation("TaxOffice");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxOfficerTarget", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.RevenueStream", "RevenueStream")
                        .WithMany("MapTaxOfficerTargets")
                        .HasForeignKey("RevenueStreamId")
                        .HasConstraintName("FK_MAP_TaxOfficer_Target_Revenue_Stream");

                    b.HasOne("SelfPortalAPi.Model.TaxOffice", "TaxOffice")
                        .WithMany("MapTaxOfficerTargets")
                        .HasForeignKey("TaxOfficeId")
                        .HasConstraintName("FK_MAP_TaxOfficer_Target_Tax_Offices");

                    b.Navigation("RevenueStream");

                    b.Navigation("TaxOffice");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerAsset", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("MapTaxPayerAssets")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_MAP_TaxPayer_Asset_Asset_Types");

                    b.HasOne("SelfPortalAPi.Model.TaxPayerType", "TaxPayer")
                        .WithMany("MapTaxPayerAssets")
                        .HasForeignKey("TaxPayerId")
                        .HasConstraintName("FK_MAP_TaxPayer_Asset_TaxPayer_Types");

                    b.HasOne("SelfPortalAPi.Model.TaxPayerRole", "TaxPayerRole")
                        .WithMany("MapTaxPayerAssets")
                        .HasForeignKey("TaxPayerRoleId")
                        .HasConstraintName("FK_MAP_TaxPayer_Asset_TaxPayer_Roles");

                    b.Navigation("AssetType");

                    b.Navigation("TaxPayer");

                    b.Navigation("TaxPayerRole");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerAssetProfile", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("MapTaxPayerAssetProfiles")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_MAP_TaxPayer_Asset_Profile_Profiles");

                    b.HasOne("SelfPortalAPi.Model.MapTaxPayerAsset", "Tpa")
                        .WithMany("MapTaxPayerAssetProfiles")
                        .HasForeignKey("Tpaid")
                        .HasConstraintName("FK_MAP_TaxPayer_Asset_Profile_MAP_TaxPayer_Asset");

                    b.Navigation("Profile");

                    b.Navigation("Tpa");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerMessageDocument", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapTaxPayerMessage", "Tpm")
                        .WithMany("MapTaxPayerMessageDocuments")
                        .HasForeignKey("Tpmid")
                        .HasConstraintName("FK_MAP_TaxPayer_Message_Document_MAP_TaxPayer_Message");

                    b.Navigation("Tpm");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestGenerate", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestGenerates")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_Generate_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestGenerateField", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapTccrequestGenerate", "Rg")
                        .WithMany("MapTccrequestGenerateFields")
                        .HasForeignKey("Rgid")
                        .HasConstraintName("FK_MAP_TCCRequest_Generate_Field_MAP_TCCRequest_Generate");

                    b.Navigation("Rg");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestGenerateTccdetail", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestGenerateTccdetails")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_GenerateTCCDetail_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestIssue", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestIssues")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_Issue_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestNotesDocument", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.MapTccrequestNote", "Rn")
                        .WithMany("MapTccrequestNotesDocuments")
                        .HasForeignKey("Rnid")
                        .HasConstraintName("FK_MAP_TCCRequest_Notes_Document_MAP_TCCRequest_Notes");

                    b.Navigation("Rn");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestPrepareTccdraft", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestPrepareTccdrafts")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_PrepareTCCDraft_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestRevoke", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestRevokes")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_Revoke_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestSeal", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestSeals")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_Seal_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestSignDigital", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestSignDigitals")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_SignDigital_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestValidate", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestValidates")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_Validate_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestValidateTaxPayerIncome", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestValidateTaxPayerIncomes")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_ValidateTaxPayerIncome_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestValidateTaxPayerInformation", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TccRequest", "Request")
                        .WithMany("MapTccrequestValidateTaxPayerInformations")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_MAP_TCCRequest_ValidateTaxPayerInformation_TCC_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTreasuryReceiptSettlement", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.TreasuryReceipt", "Receipt")
                        .WithMany("MapTreasuryReceiptSettlements")
                        .HasForeignKey("ReceiptId")
                        .HasConstraintName("FK_MAP_TreasuryReceipt_Settlement_Treasury_Receipt");

                    b.HasOne("SelfPortalAPi.Model.Settlement", "Settlement")
                        .WithMany("MapTreasuryReceiptSettlements")
                        .HasForeignKey("SettlementId")
                        .HasConstraintName("FK_MAP_TreasuryReceipt_Settlement_Settlement");

                    b.Navigation("Receipt");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MdaService", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.PaymentFrequency", "PaymentFrequency")
                        .WithMany("MdaServices")
                        .HasForeignKey("PaymentFrequencyId")
                        .HasConstraintName("FK_MDA_Services_Payment_Frequency");

                    b.HasOne("SelfPortalAPi.Model.PaymentOption", "PaymentOption")
                        .WithMany("MdaServices")
                        .HasForeignKey("PaymentOptionId")
                        .HasConstraintName("FK_MDA_Services_Payment_Options");

                    b.HasOne("SelfPortalAPi.Model.MstRuleRun", "RuleRun")
                        .WithMany("MdaServices")
                        .HasForeignKey("RuleRunId")
                        .HasConstraintName("FK_MDA_Services_MST_RuleRun");

                    b.Navigation("PaymentFrequency");

                    b.Navigation("PaymentOption");

                    b.Navigation("RuleRun");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MdaServiceItem", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Agency", "Agency")
                        .WithMany("MdaServiceItems")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_MDA_Service_Items_Agencies");

                    b.HasOne("SelfPortalAPi.Model.AssessmentItemCategory", "AssessmentItemCategory")
                        .WithMany("MdaServiceItems")
                        .HasForeignKey("AssessmentItemCategoryId")
                        .HasConstraintName("FK_MDA_Service_Items_Assessment_Item_Category");

                    b.HasOne("SelfPortalAPi.Model.AssessmentItemSubCategory", "AssessmentItemSubCategory")
                        .WithMany("MdaServiceItems")
                        .HasForeignKey("AssessmentItemSubCategoryId")
                        .HasConstraintName("FK_MDA_Service_Items_Assessment_Item_SubCategory");

                    b.HasOne("SelfPortalAPi.Model.MstComputation", "Computation")
                        .WithMany("MdaServiceItems")
                        .HasForeignKey("ComputationId")
                        .IsRequired()
                        .HasConstraintName("FK_MDA_Service_Items_MST_Computation");

                    b.HasOne("SelfPortalAPi.Model.RevenueStream", "RevenueStream")
                        .WithMany("MdaServiceItems")
                        .HasForeignKey("RevenueStreamId")
                        .HasConstraintName("FK_MDA_Service_Items_Revenue_Stream");

                    b.HasOne("SelfPortalAPi.Model.RevenueSubStream", "RevenueSubStream")
                        .WithMany("MdaServiceItems")
                        .HasForeignKey("RevenueSubStreamId")
                        .HasConstraintName("FK_MDA_Service_Items_Revenue_SubStream");

                    b.Navigation("Agency");

                    b.Navigation("AssessmentItemCategory");

                    b.Navigation("AssessmentItemSubCategory");

                    b.Navigation("Computation");

                    b.Navigation("RevenueStream");

                    b.Navigation("RevenueSubStream");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Notification", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.NotificationMethod", "NotificationMethod")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationMethodId")
                        .HasConstraintName("FK_Notifications_Notification_Method");

                    b.HasOne("SelfPortalAPi.Model.NotificationMode", "NotificationMode")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationModeId")
                        .HasConstraintName("FK_Notifications_Notification_Mode");

                    b.HasOne("SelfPortalAPi.Model.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .HasConstraintName("FK_Notifications_Notification_Type");

                    b.Navigation("NotificationMethod");

                    b.Navigation("NotificationMode");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.PaymentAccount", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.RevenueStream", "RevenueStream")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("RevenueStreamId")
                        .HasConstraintName("FK_Payment_Account_Revenue_Stream");

                    b.HasOne("SelfPortalAPi.Model.RevenueSubStream", "RevenueSubStream")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("RevenueSubStreamId")
                        .HasConstraintName("FK_Payment_Account_Revenue_SubStream");

                    b.HasOne("SelfPortalAPi.Model.SettlementMethod", "SettlementMethod")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("SettlementMethodId")
                        .HasConstraintName("FK_Payment_Account_Settlement_Method");

                    b.HasOne("SelfPortalAPi.Model.SettlementStatus", "SettlementStatus")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("SettlementStatusId")
                        .HasConstraintName("FK_Payment_Account_Settlement_Status");

                    b.HasOne("SelfPortalAPi.Model.TaxPayerType", "TaxPayerType")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("TaxPayerTypeId")
                        .HasConstraintName("FK_Payment_Account_TaxPayer_Types");

                    b.Navigation("RevenueStream");

                    b.Navigation("RevenueSubStream");

                    b.Navigation("SettlementMethod");

                    b.Navigation("SettlementStatus");

                    b.Navigation("TaxPayerType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Profile", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("Profiles")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Profiles_Asset_Types");

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileAttribute", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileAttributes")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileAttribute_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileGroup", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileGroups")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileGroup_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSector", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileSectors")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileSector_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSectorElement", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileSectorElements")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileSectorElement_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSectorSubElement", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileSectorSubElements")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileSectorSubElement_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSubAttribute", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileSubAttributes")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileSubAttribute_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSubGroup", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileSubGroups")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileSubGroup_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileSubSector", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileSubSectors")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileSubSector_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileTaxPayerRole", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileTaxPayerRoles")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileTaxPayerRole_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfileTaxPayerType", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.ProfilesBkp", "Profile")
                        .WithMany("ProfileTaxPayerTypes")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_ProfileTaxPayerType_Profiles");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfilesBkp", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("ProfilesBkps")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Profiles_Asset_Types_BKP");

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.RevenueSubStream", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.RevenueStream", "RevenueStream")
                        .WithMany("RevenueSubStreams")
                        .HasForeignKey("RevenueStreamId")
                        .HasConstraintName("FK_Revenue_SubStream_Revenue_Stream");

                    b.Navigation("RevenueStream");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Settlement", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Assessment", "Assessment")
                        .WithMany("Settlements")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_Settlement_Assessment");

                    b.HasOne("SelfPortalAPi.Model.ServiceBill", "ServiceBill")
                        .WithMany("Settlements")
                        .HasForeignKey("ServiceBillId")
                        .HasConstraintName("FK_Settlement_ServiceBill");

                    b.HasOne("SelfPortalAPi.Model.SettlementMethod", "SettlementMethod")
                        .WithMany("Settlements")
                        .HasForeignKey("SettlementMethodId")
                        .HasConstraintName("FK_Settlement_Settlement_Method");

                    b.Navigation("Assessment");

                    b.Navigation("ServiceBill");

                    b.Navigation("SettlementMethod");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SftpDataSubmission", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.SftpDataSubmissionType", "DataSubmissionType")
                        .WithMany("SftpDataSubmissions")
                        .HasForeignKey("DataSubmissionTypeId")
                        .HasConstraintName("FK_SFTP_DataSubmission_SFTP_DataSubmissionType");

                    b.HasOne("SelfPortalAPi.Model.SftpDataSubmitter", "DataSubmitter")
                        .WithMany("SftpDataSubmissions")
                        .HasForeignKey("DataSubmitterId")
                        .HasConstraintName("FK_SFTP_DataSubmission_SFTP_DataSubmitter");

                    b.Navigation("DataSubmissionType");

                    b.Navigation("DataSubmitter");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SftpMapDataSubmitterDataSubmissionType", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.SftpDataSubmissionType", "DataSubmissionType")
                        .WithMany("SftpMapDataSubmitterDataSubmissionTypes")
                        .HasForeignKey("DataSubmissionTypeId")
                        .HasConstraintName("FK_SFTP_MAP_DataSubmitter_DataSubmissionType_SFTP_DataSubmissionType");

                    b.HasOne("SelfPortalAPi.Model.SftpDataSubmitter", "DataSubmitter")
                        .WithMany("SftpMapDataSubmitterDataSubmissionTypes")
                        .HasForeignKey("DataSubmitterId")
                        .HasConstraintName("FK_SFTP_MAP_DataSubmitter_DataSubmissionType_SFTP_DataSubmitter");

                    b.Navigation("DataSubmissionType");

                    b.Navigation("DataSubmitter");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Special", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.NotificationMethod", "NotificationMethod")
                        .WithMany("Specials")
                        .HasForeignKey("NotificationMethodId")
                        .HasConstraintName("FK_Special_Notification_Method");

                    b.HasOne("SelfPortalAPi.Model.TaxOffice", "TaxOffice")
                        .WithMany("Specials")
                        .HasForeignKey("TaxOfficeId")
                        .HasConstraintName("FK_Special_Tax_Offices");

                    b.HasOne("SelfPortalAPi.Model.TaxPayerType", "TaxPayerType")
                        .WithMany("Specials")
                        .HasForeignKey("TaxPayerTypeId")
                        .HasConstraintName("FK_Special_TaxPayer_Types");

                    b.Navigation("NotificationMethod");

                    b.Navigation("TaxOffice");

                    b.Navigation("TaxPayerType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SystemUser", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.SystemRole", "SystemRole")
                        .WithMany("SystemUsers")
                        .HasForeignKey("SystemRoleId")
                        .HasConstraintName("FK_SystemUser_SystemRole");

                    b.Navigation("SystemRole");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxOffice", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AddressType", "AddressType")
                        .WithMany("TaxOffices")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_Tax_Offices_Address_Types");

                    b.HasOne("SelfPortalAPi.Model.Building", "Building")
                        .WithMany("TaxOffices")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_Tax_Offices_Building");

                    b.Navigation("AddressType");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxPayerRole", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("TaxPayerRoles")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_TaxPayer_Roles_Asset_Types");

                    b.HasOne("SelfPortalAPi.Model.TaxPayerType", "TaxPayerType")
                        .WithMany("TaxPayerRoles")
                        .HasForeignKey("TaxPayerTypeId")
                        .HasConstraintName("FK_TaxPayer_Roles_TaxPayer_Types");

                    b.Navigation("AssetType");

                    b.Navigation("TaxPayerType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Town", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Lga", "Lga")
                        .WithMany("Towns")
                        .HasForeignKey("Lgaid")
                        .HasConstraintName("FK_Town_LGA");

                    b.Navigation("Lga");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.UnitFunction", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.UnitPurpose", "UnitPurpose")
                        .WithMany("UnitFunctions")
                        .HasForeignKey("UnitPurposeId")
                        .HasConstraintName("FK_Unit_Function_Unit_Purpose");

                    b.Navigation("UnitPurpose");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Vehicle", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.AssetType", "AssetType")
                        .WithMany("Vehicles")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Vehicle_Asset_Types");

                    b.HasOne("SelfPortalAPi.Model.Lga", "Lga")
                        .WithMany("Vehicles")
                        .HasForeignKey("Lgaid")
                        .HasConstraintName("FK_Vehicle_LGA");

                    b.HasOne("SelfPortalAPi.Model.VehicleFunction", "VehicleFunction")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleFunctionId")
                        .HasConstraintName("FK_Vehicle_Vehicle_Function");

                    b.HasOne("SelfPortalAPi.Model.VehicleOwnership", "VehicleOwnership")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleOwnershipId")
                        .HasConstraintName("FK_Vehicle_Vehicle_Ownership");

                    b.HasOne("SelfPortalAPi.Model.VehiclePurpose", "VehiclePurpose")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehiclePurposeId")
                        .HasConstraintName("FK_Vehicle_Vehicle_Purpose");

                    b.HasOne("SelfPortalAPi.Model.VehicleSubType", "VehicleSubType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleSubTypeId")
                        .HasConstraintName("FK_Vehicle_Vehicle_SubTypes");

                    b.HasOne("SelfPortalAPi.Model.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("FK_Vehicle_Vehicle_Types");

                    b.Navigation("AssetType");

                    b.Navigation("Lga");

                    b.Navigation("VehicleFunction");

                    b.Navigation("VehicleOwnership");

                    b.Navigation("VehiclePurpose");

                    b.Navigation("VehicleSubType");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleFunction", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.VehiclePurpose", "VehiclePurpose")
                        .WithMany("VehicleFunctions")
                        .HasForeignKey("VehiclePurposeId")
                        .HasConstraintName("FK_Vehicle_Function_Vehicle_Purpose");

                    b.Navigation("VehiclePurpose");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleInsurance", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleInsurances")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_Vehicle_Insurance_Vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleLicense", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleLicenses")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_Vehicle_Licenses_Vehicle");

                    b.HasOne("SelfPortalAPi.Model.VehicleInsurance", "VehicleInsurance")
                        .WithMany("VehicleLicenses")
                        .HasForeignKey("VehicleInsuranceId")
                        .HasConstraintName("FK_Vehicle_Licenses_Vehicle_Insurance");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleInsurance");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleSubType", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.VehicleType", "VehicleType")
                        .WithMany("VehicleSubTypes")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("FK_Vehicle_SubTypes_Vehicle_Types");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Ward", b =>
                {
                    b.HasOne("SelfPortalAPi.Model.Lga", "Lga")
                        .WithMany("Wards")
                        .HasForeignKey("Lgaid")
                        .HasConstraintName("FK_Ward_LGA");

                    b.Navigation("Lga");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AddressType", b =>
                {
                    b.Navigation("MapCompanyAddressInformations");

                    b.Navigation("MapGovernmentAddressInformations");

                    b.Navigation("MapIndividualAddressInformations");

                    b.Navigation("MapSpecialAddressInformations");

                    b.Navigation("TaxOffices");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Agency", b =>
                {
                    b.Navigation("AssessmentItems");

                    b.Navigation("MdaServiceItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AgencyType", b =>
                {
                    b.Navigation("Agencies");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AlScreen", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Assessment", b =>
                {
                    b.Navigation("MapAssessmentAssessmentRules");

                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentGroup", b =>
                {
                    b.Navigation("AssessmentItems");

                    b.Navigation("AssessmentSubGroups");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentItem", b =>
                {
                    b.Navigation("MapAssessmentAssessmentItems");

                    b.Navigation("MapAssessmentRuleAssessmentItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentItemCategory", b =>
                {
                    b.Navigation("AssessmentItemSubCategories");

                    b.Navigation("AssessmentItems");

                    b.Navigation("MdaServiceItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentItemSubCategory", b =>
                {
                    b.Navigation("AssessmentItems");

                    b.Navigation("MdaServiceItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentRule", b =>
                {
                    b.Navigation("MapAssessmentRuleAssessmentItems");

                    b.Navigation("MapAssessmentRuleSettlementMethods");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssessmentSubGroup", b =>
                {
                    b.Navigation("AssessmentItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.AssetType", b =>
                {
                    b.Navigation("AssessmentGroups");

                    b.Navigation("AssessmentItems");

                    b.Navigation("Buildings");

                    b.Navigation("Businesses");

                    b.Navigation("Lands");

                    b.Navigation("MapTaxPayerAssets");

                    b.Navigation("Profiles");

                    b.Navigation("ProfilesBkps");

                    b.Navigation("TaxPayerRoles");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Building", b =>
                {
                    b.Navigation("MapBuildingBuildingUnits");

                    b.Navigation("MapBuildingLands");

                    b.Navigation("MapBusinessBuildings");

                    b.Navigation("MapCompanyAddressInformations");

                    b.Navigation("MapGovernmentAddressInformations");

                    b.Navigation("MapIndividualAddressInformations");

                    b.Navigation("MapSpecialAddressInformations");

                    b.Navigation("TaxOffices");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingCompletion", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingOwnership", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingPurpose", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingType", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BuildingUnit", b =>
                {
                    b.Navigation("MapBuildingBuildingUnits");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Business", b =>
                {
                    b.Navigation("MapBusinessBuildings");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessCategory", b =>
                {
                    b.Navigation("BusinessSectors");

                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessOperation", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessSector", b =>
                {
                    b.Navigation("BusinessSubSectors");

                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessStructure", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessSubSector", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.BusinessType", b =>
                {
                    b.Navigation("BusinessCategories");

                    b.Navigation("BusinessOperations");

                    b.Navigation("BusinessSectors");

                    b.Navigation("BusinessStructures");

                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Certificate", b =>
                {
                    b.Navigation("MapCertificateCustomFields");

                    b.Navigation("MapCertificateGenerates");

                    b.Navigation("MapCertificateIssues");

                    b.Navigation("MapCertificateRevokes");

                    b.Navigation("MapCertificateSeals");

                    b.Navigation("MapCertificateSignDigitals");

                    b.Navigation("MapCertificateStages");

                    b.Navigation("MapCertificateValidates");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.CertificateType", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("MapCertificateTypeFields");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Company", b =>
                {
                    b.Navigation("MapCompanyAddressInformations");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Directorate", b =>
                {
                    b.Navigation("MapDirectoratesRevenueStreams");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EconomicActivity", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.EmCategory", b =>
                {
                    b.Navigation("EmRevenueHeads");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Gender", b =>
                {
                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Government", b =>
                {
                    b.Navigation("MapGovernmentAddressInformations");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.GovernmentType", b =>
                {
                    b.Navigation("Governments");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Individual", b =>
                {
                    b.Navigation("MapIndividualAddressInformations");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Land", b =>
                {
                    b.Navigation("MapBuildingLands");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandDevelopment", b =>
                {
                    b.Navigation("Lands");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandFunction", b =>
                {
                    b.Navigation("Lands");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandOwnership", b =>
                {
                    b.Navigation("Lands");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandPurpose", b =>
                {
                    b.Navigation("LandFunctions");

                    b.Navigation("Lands");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.LandStreetCondition", b =>
                {
                    b.Navigation("Lands");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Lga", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Businesses");

                    b.Navigation("Lands");

                    b.Navigation("Towns");

                    b.Navigation("Vehicles");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Lgaclass", b =>
                {
                    b.Navigation("Lgas");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentAssessmentItem", b =>
                {
                    b.Navigation("MapAssessmentAdjustments");

                    b.Navigation("MapSettlementSettlementItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapAssessmentAssessmentRule", b =>
                {
                    b.Navigation("MapAssessmentAssessmentItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateGenerate", b =>
                {
                    b.Navigation("MapCertificateGenerateFields");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapCertificateTypeField", b =>
                {
                    b.Navigation("MapCertificateCustomFields");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillMdaservice", b =>
                {
                    b.Navigation("MapServiceBillMdaserviceItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapServiceBillMdaserviceItem", b =>
                {
                    b.Navigation("MapServiceBillAdjustments");

                    b.Navigation("MapServiceBillLateCharges");

                    b.Navigation("MapSettlementSettlementItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerAsset", b =>
                {
                    b.Navigation("MapTaxPayerAssetProfiles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTaxPayerMessage", b =>
                {
                    b.Navigation("MapTaxPayerMessageDocuments");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestGenerate", b =>
                {
                    b.Navigation("MapTccrequestGenerateFields");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MapTccrequestNote", b =>
                {
                    b.Navigation("MapTccrequestNotesDocuments");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MaritalStatus", b =>
                {
                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MdaService", b =>
                {
                    b.Navigation("MapMdaserviceMdaserviceItems");

                    b.Navigation("MapMdaserviceSettlementMethods");

                    b.Navigation("MapServiceBillMdaservices");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MdaServiceItem", b =>
                {
                    b.Navigation("MapMdaserviceMdaserviceItems");

                    b.Navigation("MapServiceBillMdaserviceItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstComputation", b =>
                {
                    b.Navigation("AssessmentItems");

                    b.Navigation("MdaServiceItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstFieldType", b =>
                {
                    b.Navigation("MapCertificateTypeFields");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstPaymentStatus", b =>
                {
                    b.Navigation("MapAssessmentAssessmentItems");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstRegisterationStatus", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Governments");

                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.MstRuleRun", b =>
                {
                    b.Navigation("AssessmentRules");

                    b.Navigation("MdaServices");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Nationality", b =>
                {
                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.NotificationMethod", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Governments");

                    b.Navigation("Individuals");

                    b.Navigation("Notifications");

                    b.Navigation("Specials");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.NotificationMode", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.PaymentFrequency", b =>
                {
                    b.Navigation("AssessmentRules");

                    b.Navigation("MdaServices");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.PaymentOption", b =>
                {
                    b.Navigation("AssessmentRules");

                    b.Navigation("MdaServices");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ProfilesBkp", b =>
                {
                    b.Navigation("AssessmentRules");

                    b.Navigation("MapTaxPayerAssetProfiles");

                    b.Navigation("ProfileAttributes");

                    b.Navigation("ProfileGroups");

                    b.Navigation("ProfileSectorElements");

                    b.Navigation("ProfileSectorSubElements");

                    b.Navigation("ProfileSectors");

                    b.Navigation("ProfileSubAttributes");

                    b.Navigation("ProfileSubGroups");

                    b.Navigation("ProfileSubSectors");

                    b.Navigation("ProfileTaxPayerRoles");

                    b.Navigation("ProfileTaxPayerTypes");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.RevenueStream", b =>
                {
                    b.Navigation("AssessmentItems");

                    b.Navigation("MapDirectoratesRevenueStreams");

                    b.Navigation("MapTaxOfficeTargets");

                    b.Navigation("MapTaxOfficerTargets");

                    b.Navigation("MdaServiceItems");

                    b.Navigation("PaymentAccounts");

                    b.Navigation("RevenueSubStreams");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.RevenueSubStream", b =>
                {
                    b.Navigation("AssessmentItems");

                    b.Navigation("MdaServiceItems");

                    b.Navigation("PaymentAccounts");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.ServiceBill", b =>
                {
                    b.Navigation("MapServiceBillMdaservices");

                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Settlement", b =>
                {
                    b.Navigation("MapSettlementSettlementItems");

                    b.Navigation("MapTreasuryReceiptSettlements");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SettlementMethod", b =>
                {
                    b.Navigation("MapAssessmentRuleSettlementMethods");

                    b.Navigation("MapMdaserviceSettlementMethods");

                    b.Navigation("PaymentAccounts");

                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SettlementStatus", b =>
                {
                    b.Navigation("PaymentAccounts");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SftpDataSubmissionType", b =>
                {
                    b.Navigation("SftpDataSubmissions");

                    b.Navigation("SftpMapDataSubmitterDataSubmissionTypes");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SftpDataSubmitter", b =>
                {
                    b.Navigation("SftpDataSubmissions");

                    b.Navigation("SftpMapDataSubmitterDataSubmissionTypes");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Size", b =>
                {
                    b.Navigation("BuildingUnits");

                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Special", b =>
                {
                    b.Navigation("MapSpecialAddressInformations");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.SystemRole", b =>
                {
                    b.Navigation("SystemUsers");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxOffice", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Governments");

                    b.Navigation("Individuals");

                    b.Navigation("MapTaxOfficeTargets");

                    b.Navigation("MapTaxOfficerTargets");

                    b.Navigation("Specials");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxPayerRole", b =>
                {
                    b.Navigation("MapTaxPayerAssets");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TaxPayerType", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("EconomicActivities");

                    b.Navigation("Governments");

                    b.Navigation("Individuals");

                    b.Navigation("MapTaxPayerAssets");

                    b.Navigation("PaymentAccounts");

                    b.Navigation("Specials");

                    b.Navigation("TaxPayerRoles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TccRequest", b =>
                {
                    b.Navigation("MapTccrequestGenerateTccdetails");

                    b.Navigation("MapTccrequestGenerates");

                    b.Navigation("MapTccrequestIssues");

                    b.Navigation("MapTccrequestPrepareTccdrafts");

                    b.Navigation("MapTccrequestRevokes");

                    b.Navigation("MapTccrequestSeals");

                    b.Navigation("MapTccrequestSignDigitals");

                    b.Navigation("MapTccrequestValidateTaxPayerIncomes");

                    b.Navigation("MapTccrequestValidateTaxPayerInformations");

                    b.Navigation("MapTccrequestValidates");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Title", b =>
                {
                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Town", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Lands");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.TreasuryReceipt", b =>
                {
                    b.Navigation("MapTreasuryReceiptSettlements");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.UnitFunction", b =>
                {
                    b.Navigation("BuildingUnits");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.UnitOccupancy", b =>
                {
                    b.Navigation("BuildingUnits");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.UnitPurpose", b =>
                {
                    b.Navigation("BuildingUnits");

                    b.Navigation("UnitFunctions");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Vehicle", b =>
                {
                    b.Navigation("VehicleInsurances");

                    b.Navigation("VehicleLicenses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleFunction", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleInsurance", b =>
                {
                    b.Navigation("VehicleLicenses");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleOwnership", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehiclePurpose", b =>
                {
                    b.Navigation("VehicleFunctions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleSubType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.VehicleType", b =>
                {
                    b.Navigation("VehicleSubTypes");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SelfPortalAPi.Model.Ward", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Lands");
                });
#pragma warning restore 612, 618
        }
    }
}
